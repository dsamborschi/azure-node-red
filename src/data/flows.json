[
    {
        "id": "a1592475ef5a5656",
        "type": "tab",
        "label": "ZUS80LP Simulator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d140a7145998a80d",
        "type": "tab",
        "label": "ZUS80LP Settings",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "0f8b93c6ce9ba9bd",
        "type": "tab",
        "label": "Draguino  LSN50 v2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9f80fd1f.3bd908",
        "type": "tab",
        "label": "Data Collection",
        "disabled": false,
        "info": "msgoutput={}\nmsgoutput.measurement = msg.topic.split('/').pop;\nmsgoutput.payload = {\n    serverTimestamp: msg.payload.ts.toISOString(),\n    value: Math.round(msg.payload.val * 1e2)/ 1e2,\n    name: msgoutput.measurement,\n}\n\nreturn msgoutput;"
    },
    {
        "id": "7474ceb842992a1a",
        "type": "tab",
        "label": "KPI-Power-Calc",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1ff02d49d32ca74f",
        "type": "tab",
        "label": "KPI Estimation",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5578664fe1c0ffde",
        "type": "tab",
        "label": "Draguino  LSN50 v2 Commands",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d5d694e68123ba96",
        "type": "tab",
        "label": "Edge Benchmarks",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "18d4fa5bcfba2ffe",
        "type": "tab",
        "label": "Pi Metrics",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "034ca9ee2be547bb",
        "type": "tab",
        "label": "ZUS80LP",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0ddfb94e5df974c6",
        "type": "tab",
        "label": "Cloud flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cloud-subflow-ui",
        "type": "tab",
        "label": "Manage Subflows",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7f15f7f9.621a48",
        "type": "subflow",
        "name": "airTemperature",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 340,
                "wires": [
                    {
                        "id": "1624d34d.8c440d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 340,
                "wires": [
                    {
                        "id": "13b9c3ef.f5db2c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "5d3f7c11.023534",
        "type": "subflow",
        "name": "airHumidity",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 340,
                "wires": [
                    {
                        "id": "c620f442.386f18"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 340,
                "wires": [
                    {
                        "id": "ed27784e.86a9d8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "41719d6c.3cfb44",
        "type": "subflow",
        "name": "soilMoisture",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 340,
                "wires": [
                    {
                        "id": "66d8b839.f565a8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 340,
                "wires": [
                    {
                        "id": "d0abdcdc.837d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "f9d383cb.41058",
        "type": "subflow",
        "name": "soilpH",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 340,
                "wires": [
                    {
                        "id": "a841f15a.dfbdf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 340,
                "wires": [
                    {
                        "id": "bdca0114.d69de",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "7a111b85.eca174",
        "type": "subflow",
        "name": "soilSalinity",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 340,
                "wires": [
                    {
                        "id": "578fce88.15de5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 340,
                "wires": [
                    {
                        "id": "f33a2102.a728",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "6d567f90c5f66d9a",
        "type": "subflow",
        "name": "ZUS80LP airGases",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 700,
                "y": 440,
                "wires": [
                    {
                        "id": "e7d8833a42173f49"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1280,
                "y": 400,
                "wires": [
                    {
                        "id": "e8b3d195ec1a0b1b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c47b6131c613a62f",
        "type": "subflow",
        "name": "ZUS80LP Air Humidity",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 740,
                "y": 440,
                "wires": [
                    {
                        "id": "e5ce5fa675a55029"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1340,
                "y": 440,
                "wires": [
                    {
                        "id": "7ba0ce746a87ca88",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "MinValue",
                "type": "num",
                "value": "0"
            },
            {
                "name": "MaxValue",
                "type": "num",
                "value": "0"
            },
            {
                "name": "Metric",
                "type": "str",
                "value": ""
            },
            {
                "name": "Accuracy",
                "type": "num",
                "value": "0"
            },
            {
                "name": "LayoutGroupName",
                "type": "str",
                "value": "Temperature"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "Trigger"
        ],
        "outputLabels": [
            "Humidity"
        ]
    },
    {
        "id": "621993a41d6b1896",
        "type": "subflow",
        "name": "ZUS80LP Air Temperature",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 720,
                "y": 420,
                "wires": [
                    {
                        "id": "c516df48e4319cd3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1480,
                "y": 500,
                "wires": [
                    {
                        "id": "1c247d5d033c3e4a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "10f93b0893e21b6f",
        "type": "subflow",
        "name": "ZUS80LP Proximity",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 740,
                "y": 440,
                "wires": [
                    {
                        "id": "c94536b45caa0f24"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1320,
                "y": 420,
                "wires": [
                    {
                        "id": "e42cb82dfc5e4680",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b1ba9d06785ac2cb",
        "type": "subflow",
        "name": "ZUS80LP Sound Level",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 680,
                "y": 440,
                "wires": [
                    {
                        "id": "e7b7f1c73553ab72"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1280,
                "y": 440,
                "wires": [
                    {
                        "id": "3d9d9ef26d2b618f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3b389ce3fe3353ee",
        "type": "subflow",
        "name": "ZUS80LP Axis Acceleration",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 680,
                "y": 460,
                "wires": [
                    {
                        "id": "6e06fed84ed12f1c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1320,
                "y": 460,
                "wires": [
                    {
                        "id": "64a27906978f2e9a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e9ff3bf64f065231",
        "type": "subflow",
        "name": "ZUS80LP Ambient Light",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 700,
                "y": 420,
                "wires": [
                    {
                        "id": "2bcc877f2e59439a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1320,
                "y": 420,
                "wires": [
                    {
                        "id": "9b2a93b2f720a956",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d8445566d5bec71c",
        "type": "subflow",
        "name": "ZUS80LP Pressure",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 760,
                "y": 460,
                "wires": [
                    {
                        "id": "90f79f3da2077e85"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1340,
                "y": 400,
                "wires": [
                    {
                        "id": "2cab2b9abe2d51f4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "05469c5a9e189424",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "6233aa5957a4c38f",
        "type": "subflow",
        "name": "Edge subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 280,
                "wires": [
                    {
                        "id": "954956eaed50a37a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 340,
                "wires": [
                    {
                        "id": "954956eaed50a37a",
                        "port": 0
                    }
                ]
            },
            {
                "x": 760,
                "y": 200,
                "wires": [
                    {
                        "id": "954956eaed50a37a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "device id",
                "type": "str",
                "value": "test_123",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "device 1"
                                },
                                "v": "1"
                            },
                            {
                                "l": {
                                    "en-US": "device 1"
                                },
                                "v": "2"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d099f46e92b8877c",
        "type": "subflow",
        "name": "Subflow 2",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [
            {
                "name": "dfdgfdgd",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "dgdf"
                                },
                                "v": "4"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "924be2925f3ecf90",
        "type": "subflow",
        "name": "Edge App",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 200,
                "wires": [
                    {
                        "id": "c572387da20c3b76"
                    },
                    {
                        "id": "df701129619157c9"
                    },
                    {
                        "id": "927e4698d04d7828"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 120,
                "wires": [
                    {
                        "id": "c572387da20c3b76",
                        "port": 0
                    }
                ]
            },
            {
                "x": 580,
                "y": 200,
                "wires": [
                    {
                        "id": "df701129619157c9",
                        "port": 0
                    }
                ]
            },
            {
                "x": 580,
                "y": 280,
                "wires": [
                    {
                        "id": "927e4698d04d7828",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Device",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Device"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Edge 1"
                                },
                                "v": "1"
                            },
                            {
                                "l": {
                                    "en-US": "Edge 2"
                                },
                                "v": "2"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "40d5e9f3cb7d1ab5",
        "type": "group",
        "z": "18d4fa5bcfba2ffe",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b670a26fca7a8097",
            "d72002f7313a30c4",
            "d4fc1262d423c48e",
            "5baaacfc205af53f",
            "33d5a7bfe3967d10",
            "df58205adc53b565",
            "c5f59199dbe0f0e0",
            "de0f6d77665773ac",
            "85858491e78a3abd",
            "4f3f691cfd57d944",
            "4a3c621abe9ad888",
            "6f93092ad15062c8",
            "100d8612bd96b669",
            "de0f4b9db88273bc",
            "41169a2fda841104",
            "38ae2f6ae6711428",
            "19b528a9b06ee497",
            "c66145e8ddedc8d9",
            "d7634581689edb0e",
            "c783ba6268748e3b",
            "0c46a7433bc9ed6e",
            "f9739822a3b1ea51",
            "089da2e8e3cce80b",
            "0f7752b89cfc587b",
            "5b06272476c6fec9"
        ],
        "x": 54,
        "y": 99,
        "w": 1172,
        "h": 562
    },
    {
        "id": "bda41343f1564615",
        "type": "group",
        "z": "18d4fa5bcfba2ffe",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cd7e6d6038fa54d1",
            "cb9f988bb68bb455",
            "855e336786941581",
            "5349a60e9c20570c",
            "77333982d53381e8",
            "789da2e46feb0cb7",
            "ee9f9f3ebf4623f6",
            "86ae6470eaf85b23",
            "f7eedc4d9c2c553b",
            "bde54b56699c8fe5",
            "fdaa45a1d1dc5627",
            "535367462ca588e1",
            "4649724107fafd04",
            "0d1aedeb2cfba2ea",
            "b24245778b7133ce",
            "8b31768331ad452a",
            "0d3bc6f714fbf16d",
            "8c50c539f516851b",
            "ee9e4fe04aadb778",
            "b716a9331c099771",
            "70e966743c1c1829",
            "e534bdfa2b69f090",
            "0ce91d837889e57f",
            "a6e0c4a90d3f5d2c",
            "49dbea5564fb5e98"
        ],
        "x": 54,
        "y": 679,
        "w": 1072,
        "h": 482
    },
    {
        "id": "f046d6b8385209df",
        "type": "group",
        "z": "0ddfb94e5df974c6",
        "name": "Edge",
        "style": {
            "label": true,
            "stroke": "#ffC000"
        },
        "nodes": [
            "23cc57c28aa2ddb6",
            "7a347a347ccdb8e9",
            "ce6aaacb30f33002",
            "c3b01793a7d9f31b"
        ],
        "x": 194,
        "y": 79,
        "w": 652,
        "h": 162
    },
    {
        "id": "012ff504a3100ffc",
        "type": "group",
        "z": "034ca9ee2be547bb",
        "name": "Downlink commands",
        "style": {
            "label": true
        },
        "nodes": [
            "df19b729c46af524",
            "7b2e4db565810dfb",
            "5d03f2c33af5fb32",
            "e8729968e5f2678f",
            "3151b96379ea627b",
            "fef5c83f2dc0b191"
        ],
        "x": 114,
        "y": 179,
        "w": 952,
        "h": 202
    },
    {
        "id": "cf54420f4e5c8118",
        "type": "group",
        "z": "034ca9ee2be547bb",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "9db82a0ec93d3f93",
            "af1a5da73ffb87d9",
            "48c7c181272ac2cd",
            "1aace63c9b8fcd1a",
            "b7e96024ff7881bb",
            "2ab02af21a768089"
        ],
        "x": 234,
        "y": 479,
        "w": 632,
        "h": 209.5
    },
    {
        "id": "7470b7d7b1fecf78",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "iot",
        "name": "sensors",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "75924f56.e2a3c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "derekmtc",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://172.17.0.3:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "975d9d8aa43fde77",
        "type": "influxdb",
        "hostname": "influx",
        "port": "8086",
        "protocol": "http",
        "database": "iot",
        "name": "iot",
        "usetls": true,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influx:8086",
        "timeout": "10",
        "rejectUnauthorized": false
    },
    {
        "id": "ca4f07abb4d962ad",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2836ef738fca8069",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "default",
        "titleBarStyle": "default"
    },
    {
        "id": "bcaabb7706c65da8",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "9d944948e290126e",
        "type": "ui-page",
        "name": "Page 1",
        "ui": "2836ef738fca8069",
        "path": "/page1",
        "icon": "home",
        "layout": "grid",
        "theme": "bcaabb7706c65da8",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "afadb199d621b737",
        "type": "ui-group",
        "name": "Device settings",
        "page": "9d944948e290126e",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "88e58d5c.be73",
        "type": "lorawan-keys",
        "name": "Lora-Example",
        "keys": "{\"12345678\":{\"nsw\":\"00000000000000000000000000000000\",\"asw\":\"123456789abcdef00000000000000000\",\"type\":\"foo\",\"name\":\"Foo 1\"},\"0000abcd\":{\"nsw\":\"00000000000000000000000000000000\",\"asw\":\"00000000000000000000000000000000\",\"type\":\"bar\",\"name\":\"Bar 1\"}}"
    },
    {
        "id": "b3eb2acab560eb0e",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://opc_data_generator:4840/freeopcua/server/",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "010b75ef3e2c386f",
        "type": "websocket-listener",
        "path": "ws://192.168.0.18:8081/status",
        "wholemsg": "false"
    },
    {
        "id": "8c5b05a2.ccb108",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#4a8a3d",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#4d5bc7",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#4d5bc7",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#4d5bc7",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#8791d9",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#4d5bc7",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "IoT Device Simulator",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "a1f71297.5b069",
        "type": "ui_group",
        "name": "Simulation Control",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "25",
        "collapse": false
    },
    {
        "id": "5d47cc2.fe17834",
        "type": "ui_group",
        "name": "Air Temperature",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "5",
        "collapse": false
    },
    {
        "id": "856d803c.8b0cc",
        "type": "ui_group",
        "name": "Air Humidity",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "5",
        "collapse": false
    },
    {
        "id": "b9c3ab84.f017f8",
        "type": "ui_group",
        "name": "Soil Moisture",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "5",
        "collapse": false
    },
    {
        "id": "99a1466b.ac8278",
        "type": "ui_group",
        "name": "Soil pH",
        "tab": "",
        "order": 5,
        "disp": true,
        "width": "5",
        "collapse": false
    },
    {
        "id": "bc339738.e6a1e8",
        "type": "ui_group",
        "name": "Soil Salinity",
        "tab": "",
        "order": 6,
        "disp": true,
        "width": "5",
        "collapse": false
    },
    {
        "id": "13f27471.8ac73c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "91dd813.4ee908",
        "order": 8,
        "width": "0",
        "height": "0"
    },
    {
        "id": "bb58c10d.e7b37",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "88de906.e68327",
        "order": 7,
        "width": "4",
        "height": "18"
    },
    {
        "id": "699f4120f833afe5",
        "type": "ui_tab",
        "name": "ZUS80LP Simulator",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a4d0cf38f2fa8d7c",
        "type": "ui_group",
        "name": "Simulation Control",
        "tab": "699f4120f833afe5",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "97f651bae4c99069",
        "type": "ui_group",
        "name": "Humidity",
        "tab": "699f4120f833afe5",
        "order": 2,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3f7bbcfbd61c4c3f",
        "type": "ui_group",
        "name": "Temperature",
        "tab": "699f4120f833afe5",
        "order": 3,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "71a9630a4cf6e958",
        "type": "ui_group",
        "name": "Harmfull Gasses",
        "tab": "699f4120f833afe5",
        "order": 4,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "169cb7afdc1a1346",
        "type": "ui_group",
        "name": "Proximity",
        "tab": "699f4120f833afe5",
        "order": 5,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c9dd5760539df9d7",
        "type": "ui_group",
        "name": "Sound Level",
        "tab": "699f4120f833afe5",
        "order": 6,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c610e7cdc4882a35",
        "type": "ui_group",
        "name": "Axis Acceleration",
        "tab": "699f4120f833afe5",
        "order": 7,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b97195ddece4c07d",
        "type": "ui_group",
        "name": "Ambient Light",
        "tab": "699f4120f833afe5",
        "order": 8,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0a8a060abc720105",
        "type": "ui_group",
        "name": "Pressure",
        "tab": "699f4120f833afe5",
        "order": 9,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2e99048de41c9522",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5531f09c1a10a2b8",
        "type": "ui_group",
        "name": "",
        "tab": "2e99048de41c9522",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "70d695ad1258f5f6",
        "type": "ui_spacer",
        "z": "a1592475ef5a5656",
        "name": "spacer",
        "group": "a4d0cf38f2fa8d7c",
        "order": 3,
        "width": 3,
        "height": 1
    },
    {
        "id": "989dc4d167739234",
        "type": "ui_spacer",
        "z": "a1592475ef5a5656",
        "name": "spacer",
        "group": "a4d0cf38f2fa8d7c",
        "order": 5,
        "width": 9,
        "height": 1
    },
    {
        "id": "862a790de52f4ea4",
        "type": "mqtt-broker",
        "name": "LHT65N",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7e01624d2b1a030f",
        "type": "ui_tab",
        "name": "LHT65N",
        "icon": "LHT65N",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "07f5d7ac744916d7",
        "type": "ui_group",
        "name": "Commands",
        "tab": "7e01624d2b1a030f",
        "order": 13,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4ad3ce8d.582c5",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "edgedb",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influx:8086",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "1ab7e97a.bda1e7",
        "type": "mqtt-broker",
        "name": "Databus",
        "broker": "ie-databus",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1b70cc5299eb3297",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.239.200:4840",
        "secpol": "None",
        "secmode": "SIGN",
        "none": false,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "482fd449169af8c7",
        "type": "ui_tab",
        "name": "Draguino LSN50 v2",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4a658f100def1a9e",
        "type": "ui_group",
        "name": "Commands",
        "tab": "482fd449169af8c7",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7af2d9c8.0a9148",
        "type": "ui_tab",
        "name": "RTSP",
        "icon": "dashboard",
        "order": 13,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4c18d17991094de3",
        "type": "mqtt-broker",
        "name": "WAGO",
        "broker": "192.168.5.5",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6aad8bdd22b72ed0",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.4.20",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "071cc87c0a123f0e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0c00c00418f2b5c9",
        "type": "ui_group",
        "name": "Proocessor",
        "tab": "071cc87c0a123f0e",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ee85de5c0b3cc14b",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.4.20",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8899b487528974fe",
        "type": "ui_tab",
        "name": "Details",
        "icon": "fa-fire",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cce6e02253143063",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2c162edb3230efac",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt-dashboard.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "663c6ed89f688613",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyS7",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "6c8dcef19b33b1ab",
        "type": "ui_group",
        "name": "f_port",
        "tab": "7e01624d2b1a030f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9d9e40253fa3a62f",
        "type": "ui_group",
        "name": "f_cunt",
        "tab": "7e01624d2b1a030f",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b24db75b1499c15f",
        "type": "ui_group",
        "name": "bat",
        "tab": "7e01624d2b1a030f",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "758898c4bead5e6f",
        "type": "ui_group",
        "name": "Bat_status",
        "tab": "7e01624d2b1a030f",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a8f02d8f9b3e80a1",
        "type": "ui_group",
        "name": "Ext_sensor",
        "tab": "7e01624d2b1a030f",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a9ef53ea130e5557",
        "type": "ui_group",
        "name": "Hum_SHT",
        "tab": "7e01624d2b1a030f",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1558cd7a030388f7",
        "type": "ui_group",
        "name": "TempC_sensor",
        "tab": "7e01624d2b1a030f",
        "order": 10,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f523098714ee6cd6",
        "type": "ui_group",
        "name": "TempC_SHT",
        "tab": "7e01624d2b1a030f",
        "order": 11,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b1dc3cad430eb5b7",
        "type": "ui_group",
        "name": "Exti_pin_level",
        "tab": "7e01624d2b1a030f",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4184be11e1179998",
        "type": "ui_group",
        "name": "Exti_status",
        "tab": "7e01624d2b1a030f",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "28cf5cca4c2c0bb5",
        "type": "ui_group",
        "name": "exit_count",
        "tab": "7e01624d2b1a030f",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5f974d1fd1c0edfa",
        "type": "ui_group",
        "name": "ADC_V",
        "tab": "7e01624d2b1a030f",
        "order": 12,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e16e06ca.f38438",
        "type": "ui_group",
        "name": "Frame Statistics",
        "tab": "7af2d9c8.0a9148",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "675036dd.603328",
        "type": "ui_group",
        "name": "Frame Grab",
        "tab": "7af2d9c8.0a9148",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "53db0fac8dfd1e61",
        "type": "ui_group",
        "name": "Communications",
        "tab": "071cc87c0a123f0e",
        "order": 2,
        "disp": true,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b1bbc4f30d273934",
        "type": "ui_group",
        "name": "Stress Test",
        "tab": "071cc87c0a123f0e",
        "order": 3,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "301e3932bd7924d9",
        "type": "ui_group",
        "name": "Test Clients",
        "tab": "071cc87c0a123f0e",
        "order": 4,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6507ea85adb5317b",
        "type": "ui_group",
        "name": "Devices",
        "tab": "8899b487528974fe",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3c7bbdb4.397652",
        "type": "ui_slider",
        "z": "7f15f7f9.621a48",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of air temperature",
        "group": "5d47cc2.fe17834",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 90,
        "y": 80,
        "wires": [
            [
                "3cc63cd5.bfd614",
                "19e8c238.3d103e"
            ]
        ]
    },
    {
        "id": "de94d6da.924528",
        "type": "ui_slider",
        "z": "7f15f7f9.621a48",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of air temperature",
        "group": "5d47cc2.fe17834",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 90,
        "y": 200,
        "wires": [
            [
                "bc16f7a3.5459e8",
                "af5ddc0e.7a70d"
            ]
        ]
    },
    {
        "id": "3cc63cd5.bfd614",
        "type": "ui_text",
        "z": "7f15f7f9.621a48",
        "group": "5d47cc2.fe17834",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "bc16f7a3.5459e8",
        "type": "ui_text",
        "z": "7f15f7f9.621a48",
        "group": "5d47cc2.fe17834",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 250,
        "y": 200,
        "wires": []
    },
    {
        "id": "19e8c238.3d103e",
        "type": "function",
        "z": "7f15f7f9.621a48",
        "name": "minValue",
        "func": "flow.set(\"airTemperatureMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "1624d34d.8c440d"
            ]
        ]
    },
    {
        "id": "af5ddc0e.7a70d",
        "type": "function",
        "z": "7f15f7f9.621a48",
        "name": "maxValue",
        "func": "flow.set(\"airTemperatureMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 260,
        "wires": [
            [
                "1624d34d.8c440d"
            ]
        ]
    },
    {
        "id": "1624d34d.8c440d",
        "type": "function",
        "z": "7f15f7f9.621a48",
        "name": "airTemperature",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"airTemperatureMin\");\n    let max = flow.get(\"airTemperatureMax\");\n    let airTemperature = (Math.random() * (max - min) + min).toFixed(2);\n    global.set(\"airTemperature\", airTemperature);\n    msg.payload = airTemperature;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 180,
        "wires": [
            [
                "c5dd25cb.aafdd8",
                "5e05ee13.787a1",
                "13b9c3ef.f5db2c"
            ]
        ]
    },
    {
        "id": "c5dd25cb.aafdd8",
        "type": "ui_gauge",
        "z": "7f15f7f9.621a48",
        "name": "airTemperatureReading",
        "group": "5d47cc2.fe17834",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "°C",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 750,
        "y": 180,
        "wires": []
    },
    {
        "id": "5e05ee13.787a1",
        "type": "ui_chart",
        "z": "7f15f7f9.621a48",
        "name": "airTemperatureChart",
        "group": "5d47cc2.fe17834",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Air temperature last minute",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Awaiting new data",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 740,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "13b9c3ef.f5db2c",
        "type": "function",
        "z": "7f15f7f9.621a48",
        "name": "airTemperatureMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let airTemperature = global.get(\"airTemperature\");\n    let payload = {\n        [timestamp]: airTemperature,\n    };\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4befd78.7f55828",
        "type": "ui_slider",
        "z": "5d3f7c11.023534",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of air humidity",
        "group": "856d803c.8b0cc",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "8baae11d.e51f8",
                "fde2eb98.eee518"
            ]
        ]
    },
    {
        "id": "1ac7bd1.46aae43",
        "type": "ui_slider",
        "z": "5d3f7c11.023534",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of air humidity",
        "group": "856d803c.8b0cc",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "ba3e7660.b71498",
                "1b3d24ba.a7f7fb"
            ]
        ]
    },
    {
        "id": "8baae11d.e51f8",
        "type": "ui_text",
        "z": "5d3f7c11.023534",
        "group": "856d803c.8b0cc",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "ba3e7660.b71498",
        "type": "ui_text",
        "z": "5d3f7c11.023534",
        "group": "856d803c.8b0cc",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 250,
        "y": 200,
        "wires": []
    },
    {
        "id": "fde2eb98.eee518",
        "type": "function",
        "z": "5d3f7c11.023534",
        "name": "minValue",
        "func": "flow.set(\"airHumidityMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "c620f442.386f18"
            ]
        ]
    },
    {
        "id": "1b3d24ba.a7f7fb",
        "type": "function",
        "z": "5d3f7c11.023534",
        "name": "maxValue",
        "func": "flow.set(\"airHumidityMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 260,
        "wires": [
            [
                "c620f442.386f18"
            ]
        ]
    },
    {
        "id": "c620f442.386f18",
        "type": "function",
        "z": "5d3f7c11.023534",
        "name": "airHumidity",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"airHumidityMin\");\n    let max = flow.get(\"airHumidityMax\");\n    let airHumidity = (Math.random() * (max - min) + min).toFixed(2);\n    global.set(\"airHumidity\", airHumidity);\n    msg.payload = airHumidity;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 180,
        "wires": [
            [
                "1b3ce38d.277eac",
                "ffda1a6.b3b41e8",
                "ed27784e.86a9d8"
            ]
        ]
    },
    {
        "id": "1b3ce38d.277eac",
        "type": "ui_gauge",
        "z": "5d3f7c11.023534",
        "name": "airHumidityReading",
        "group": "856d803c.8b0cc",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "%",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 730,
        "y": 180,
        "wires": []
    },
    {
        "id": "ffda1a6.b3b41e8",
        "type": "ui_chart",
        "z": "5d3f7c11.023534",
        "name": "airHumidityChart",
        "group": "856d803c.8b0cc",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Air humidity last minute",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Awaiting new data",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 730,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ed27784e.86a9d8",
        "type": "function",
        "z": "5d3f7c11.023534",
        "name": "airHumidityMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let airHumidity = global.get(\"airHumidity\");\n    let payload = {\n        [timestamp]: airHumidity,\n    };\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "2111e35.d18c81c",
        "type": "ui_slider",
        "z": "41719d6c.3cfb44",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of soil moisture",
        "group": "b9c3ab84.f017f8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 90,
        "y": 80,
        "wires": [
            [
                "8167486c.537088",
                "f1cf97bd.f58b08"
            ]
        ]
    },
    {
        "id": "b69c67dc.a3f5e8",
        "type": "ui_slider",
        "z": "41719d6c.3cfb44",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of soil moisture",
        "group": "b9c3ab84.f017f8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 90,
        "y": 200,
        "wires": [
            [
                "ae5b6533.924748",
                "8bb90da8.cfe89"
            ]
        ]
    },
    {
        "id": "8167486c.537088",
        "type": "ui_text",
        "z": "41719d6c.3cfb44",
        "group": "b9c3ab84.f017f8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "ae5b6533.924748",
        "type": "ui_text",
        "z": "41719d6c.3cfb44",
        "group": "b9c3ab84.f017f8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 250,
        "y": 200,
        "wires": []
    },
    {
        "id": "f1cf97bd.f58b08",
        "type": "function",
        "z": "41719d6c.3cfb44",
        "name": "minValue",
        "func": "flow.set(\"soilMoistureMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "66d8b839.f565a8"
            ]
        ]
    },
    {
        "id": "8bb90da8.cfe89",
        "type": "function",
        "z": "41719d6c.3cfb44",
        "name": "maxValue",
        "func": "flow.set(\"soilMoistureMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 260,
        "wires": [
            [
                "66d8b839.f565a8"
            ]
        ]
    },
    {
        "id": "66d8b839.f565a8",
        "type": "function",
        "z": "41719d6c.3cfb44",
        "name": "soilMoisture",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"soilMoistureMin\");\n    let max = flow.get(\"soilMoistureMax\");\n    let soilMoisture = (Math.random() * (max - min) + min).toFixed(2);\n    global.set(\"soilMoisture\", soilMoisture);\n    msg.payload = soilMoisture;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "a0795cf.c2a64a",
                "4f0a0648.5b31a8",
                "d0abdcdc.837d"
            ]
        ]
    },
    {
        "id": "a0795cf.c2a64a",
        "type": "ui_gauge",
        "z": "41719d6c.3cfb44",
        "name": "soilMoistureReading",
        "group": "b9c3ab84.f017f8",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "%",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 740,
        "y": 180,
        "wires": []
    },
    {
        "id": "4f0a0648.5b31a8",
        "type": "ui_chart",
        "z": "41719d6c.3cfb44",
        "name": "soilMoistureChart",
        "group": "b9c3ab84.f017f8",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Soil moisture last minute",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Awaiting new data",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 730,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d0abdcdc.837d",
        "type": "function",
        "z": "41719d6c.3cfb44",
        "name": "soilMoistureMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let soilMoisture = global.get(\"soilMoisture\");\n    let payload = {\n        [timestamp]: soilMoisture,\n    };\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "182fcb04.d29485",
        "type": "ui_slider",
        "z": "f9d383cb.41058",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of soil pH",
        "group": "99a1466b.ac8278",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 90,
        "y": 80,
        "wires": [
            [
                "438558f7.43fa58",
                "59a3bae8.75fab4"
            ]
        ]
    },
    {
        "id": "20e93046.90f84",
        "type": "ui_slider",
        "z": "f9d383cb.41058",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of soil pH",
        "group": "99a1466b.ac8278",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 90,
        "y": 200,
        "wires": [
            [
                "69c13815.f100c8",
                "5ca1b6da.29b658"
            ]
        ]
    },
    {
        "id": "438558f7.43fa58",
        "type": "ui_text",
        "z": "f9d383cb.41058",
        "group": "99a1466b.ac8278",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "69c13815.f100c8",
        "type": "ui_text",
        "z": "f9d383cb.41058",
        "group": "99a1466b.ac8278",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 250,
        "y": 200,
        "wires": []
    },
    {
        "id": "59a3bae8.75fab4",
        "type": "function",
        "z": "f9d383cb.41058",
        "name": "minValue",
        "func": "flow.set(\"soilpHMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "a841f15a.dfbdf"
            ]
        ]
    },
    {
        "id": "5ca1b6da.29b658",
        "type": "function",
        "z": "f9d383cb.41058",
        "name": "maxValue",
        "func": "flow.set(\"soilpHMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 260,
        "wires": [
            [
                "a841f15a.dfbdf"
            ]
        ]
    },
    {
        "id": "a841f15a.dfbdf",
        "type": "function",
        "z": "f9d383cb.41058",
        "name": "soilpH",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"soilpHMin\");\n    let max = flow.get(\"soilpHMax\");\n    let soilpH = (Math.random() * (max - min) + min).toFixed(2);\n    global.set(\"soilpH\", soilpH);\n    msg.payload = soilpH;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 180,
        "wires": [
            [
                "d342e64f.727438",
                "6d157a2c.bf8b94",
                "bdca0114.d69de"
            ]
        ]
    },
    {
        "id": "d342e64f.727438",
        "type": "ui_gauge",
        "z": "f9d383cb.41058",
        "name": "soilpHReading",
        "group": "99a1466b.ac8278",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "pH",
        "label": "pH",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 720,
        "y": 180,
        "wires": []
    },
    {
        "id": "6d157a2c.bf8b94",
        "type": "ui_chart",
        "z": "f9d383cb.41058",
        "name": "soilpHChart",
        "group": "99a1466b.ac8278",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Soil pH last minute",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Awaiting new data",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 710,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "bdca0114.d69de",
        "type": "function",
        "z": "f9d383cb.41058",
        "name": "soilpHMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let soilpH = global.get(\"soilpH\");\n    let payload = {\n        [timestamp]: soilpH,\n    };\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "41bf3400.90221c",
        "type": "ui_slider",
        "z": "7a111b85.eca174",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of soil salinity",
        "group": "bc339738.e6a1e8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 90,
        "y": 80,
        "wires": [
            [
                "fdf0cc7c.4ecee",
                "282064d6.5f80bc"
            ]
        ]
    },
    {
        "id": "1ffabc67.81cd24",
        "type": "ui_slider",
        "z": "7a111b85.eca174",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of soil salinity",
        "group": "bc339738.e6a1e8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 90,
        "y": 200,
        "wires": [
            [
                "bf135961.f055d8",
                "3c191757.18a9c8"
            ]
        ]
    },
    {
        "id": "fdf0cc7c.4ecee",
        "type": "ui_text",
        "z": "7a111b85.eca174",
        "group": "bc339738.e6a1e8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "bf135961.f055d8",
        "type": "ui_text",
        "z": "7a111b85.eca174",
        "group": "bc339738.e6a1e8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 250,
        "y": 200,
        "wires": []
    },
    {
        "id": "282064d6.5f80bc",
        "type": "function",
        "z": "7a111b85.eca174",
        "name": "minValue",
        "func": "flow.set(\"soilSalinityMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "578fce88.15de5"
            ]
        ]
    },
    {
        "id": "3c191757.18a9c8",
        "type": "function",
        "z": "7a111b85.eca174",
        "name": "maxValue",
        "func": "flow.set(\"soilSalinityMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 260,
        "y": 260,
        "wires": [
            [
                "578fce88.15de5"
            ]
        ]
    },
    {
        "id": "578fce88.15de5",
        "type": "function",
        "z": "7a111b85.eca174",
        "name": "soilSalinity",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"soilSalinityMin\");\n    let max = flow.get(\"soilSalinityMax\");\n    let soilSalinity = (Math.random() * (max - min) + min).toFixed(2);\n    global.set(\"soilSalinity\", soilSalinity);\n    msg.payload = soilSalinity;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "42d8c053.597ff",
                "5aa01ca0.9391c4",
                "f33a2102.a728"
            ]
        ]
    },
    {
        "id": "42d8c053.597ff",
        "type": "ui_gauge",
        "z": "7a111b85.eca174",
        "name": "soilSalinityReading",
        "group": "bc339738.e6a1e8",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "mS/cm",
        "label": "mS/cm",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 730,
        "y": 180,
        "wires": []
    },
    {
        "id": "5aa01ca0.9391c4",
        "type": "ui_chart",
        "z": "7a111b85.eca174",
        "name": "soilSalinityChart",
        "group": "bc339738.e6a1e8",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Soil salinity last minute",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Awaiting new data",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 720,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "f33a2102.a728",
        "type": "function",
        "z": "7a111b85.eca174",
        "name": "soilSalinityMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let soilSalinity = global.get(\"soilSalinity\");\n    let payload = {\n        [timestamp]: soilSalinity,\n    };\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a01d82b7e7b7817c",
        "type": "ui_slider",
        "z": "6d567f90c5f66d9a",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of harmfull gases",
        "group": "71a9630a4cf6e958",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "400",
        "step": 1,
        "className": "",
        "x": 470,
        "y": 140,
        "wires": [
            [
                "f651bc95b671a591",
                "c7c533600ba15222"
            ]
        ]
    },
    {
        "id": "bfc4f7c5963e4abd",
        "type": "ui_slider",
        "z": "6d567f90c5f66d9a",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of harmfull gases",
        "group": "71a9630a4cf6e958",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "400",
        "step": 1,
        "className": "",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "237ded0fc874547e",
                "b5d6c4b380b1f5bd"
            ]
        ]
    },
    {
        "id": "f651bc95b671a591",
        "type": "ui_text",
        "z": "6d567f90c5f66d9a",
        "group": "71a9630a4cf6e958",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "237ded0fc874547e",
        "type": "ui_text",
        "z": "6d567f90c5f66d9a",
        "group": "71a9630a4cf6e958",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "c7c533600ba15222",
        "type": "function",
        "z": "6d567f90c5f66d9a",
        "name": "minValue",
        "func": "flow.set(\"harmfull_gasesMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": [
            [
                "e7d8833a42173f49"
            ]
        ]
    },
    {
        "id": "b5d6c4b380b1f5bd",
        "type": "function",
        "z": "6d567f90c5f66d9a",
        "name": "maxValue",
        "func": "flow.set(\"harmfull_gasesMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "e7d8833a42173f49"
            ]
        ]
    },
    {
        "id": "e7d8833a42173f49",
        "type": "function",
        "z": "6d567f90c5f66d9a",
        "name": "HarmfullGases",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"harmfull_gasesMin\");\n    let max = flow.get(\"harmfull_gasesMax\");\n    let harmful_gases = (Math.random() * (max - min) + min).toFixed(0);\n    global.set(\"harmful_gases\", harmful_gases);\n    msg.payload = harmful_gases;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 240,
        "wires": [
            [
                "17cb8f3820a4b2df",
                "e8b3d195ec1a0b1b"
            ]
        ]
    },
    {
        "id": "17cb8f3820a4b2df",
        "type": "ui_gauge",
        "z": "6d567f90c5f66d9a",
        "name": "Harmfull Gases Reading",
        "group": "71a9630a4cf6e958",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "400",
        "colors": [
            "#b37100",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "350",
        "seg2": "351",
        "diff": false,
        "className": "",
        "x": 1130,
        "y": 240,
        "wires": []
    },
    {
        "id": "e8b3d195ec1a0b1b",
        "type": "function",
        "z": "6d567f90c5f66d9a",
        "name": "HarmfullGasesMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let harmful_gases = global.get(\"harmful_gases\");\n    let payload = harmful_gases;\n    msg.topic = \"harmful_gases\";\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "43c2c49ae52b9b95",
        "type": "function",
        "z": "6d567f90c5f66d9a",
        "name": "default min",
        "func": "msg.payload = 300\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "a01d82b7e7b7817c"
            ]
        ]
    },
    {
        "id": "ba2304a9fc04dac4",
        "type": "function",
        "z": "6d567f90c5f66d9a",
        "name": "default max",
        "func": "msg.payload = 400\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 260,
        "wires": [
            [
                "bfc4f7c5963e4abd"
            ]
        ]
    },
    {
        "id": "49c68f1fd023cd24",
        "type": "inject",
        "z": "6d567f90c5f66d9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "43c2c49ae52b9b95"
            ]
        ]
    },
    {
        "id": "21f9f36632c091a1",
        "type": "inject",
        "z": "6d567f90c5f66d9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "ba2304a9fc04dac4"
            ]
        ]
    },
    {
        "id": "2d2ee0d02aa0097d",
        "type": "ui_slider",
        "z": "c47b6131c613a62f",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of air humidity",
        "group": "97f651bae4c99069",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": "0",
        "max": "100",
        "step": 1,
        "className": "",
        "x": 510,
        "y": 180,
        "wires": [
            [
                "e525a4a5c2f33222",
                "97a44ffdc6135245"
            ]
        ]
    },
    {
        "id": "bc880c374bba53ed",
        "type": "ui_slider",
        "z": "c47b6131c613a62f",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of air humidity",
        "group": "97f651bae4c99069",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 510,
        "y": 300,
        "wires": [
            [
                "25cec43011806e07",
                "a1b00ec286614f09"
            ]
        ]
    },
    {
        "id": "e525a4a5c2f33222",
        "type": "ui_text",
        "z": "c47b6131c613a62f",
        "group": "97f651bae4c99069",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 670,
        "y": 180,
        "wires": []
    },
    {
        "id": "25cec43011806e07",
        "type": "ui_text",
        "z": "c47b6131c613a62f",
        "group": "97f651bae4c99069",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 670,
        "y": 300,
        "wires": []
    },
    {
        "id": "97a44ffdc6135245",
        "type": "function",
        "z": "c47b6131c613a62f",
        "name": "minValue",
        "func": "flow.set(\"airHumidityMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 240,
        "wires": [
            [
                "e5ce5fa675a55029"
            ]
        ]
    },
    {
        "id": "a1b00ec286614f09",
        "type": "function",
        "z": "c47b6131c613a62f",
        "name": "maxValue",
        "func": "flow.set(\"airHumidityMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 360,
        "wires": [
            [
                "e5ce5fa675a55029"
            ]
        ]
    },
    {
        "id": "e5ce5fa675a55029",
        "type": "function",
        "z": "c47b6131c613a62f",
        "name": "airHumidity",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"airHumidityMin\");\n    let max = flow.get(\"airHumidityMax\");\n    let airHumidity = (Math.random() * (max - min) + min).toFixed(0);\n    global.set(\"airHumidity\", airHumidity);\n    msg.payload = airHumidity;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 280,
        "wires": [
            [
                "c417dd29888d0ee4",
                "7ba0ce746a87ca88"
            ]
        ]
    },
    {
        "id": "c417dd29888d0ee4",
        "type": "ui_gauge",
        "z": "c47b6131c613a62f",
        "name": "airHumidityReading",
        "group": "97f651bae4c99069",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "%",
        "label": "%",
        "format": "{{value}}",
        "min": "10",
        "max": "90",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1150,
        "y": 280,
        "wires": []
    },
    {
        "id": "7ba0ce746a87ca88",
        "type": "function",
        "z": "c47b6131c613a62f",
        "name": "airHumidityMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let airHumidity = global.get(\"airHumidity\");\n    let payload = airHumidity;\n    msg.topic = \"humidity\";\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "433e62fcdf6f48a8",
        "type": "function",
        "z": "c47b6131c613a62f",
        "name": "default min",
        "func": "msg.payload = 60\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "2d2ee0d02aa0097d"
            ]
        ]
    },
    {
        "id": "fbbcf835357c5267",
        "type": "function",
        "z": "c47b6131c613a62f",
        "name": "default max",
        "func": "msg.payload = 78\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "bc880c374bba53ed"
            ]
        ]
    },
    {
        "id": "345657cfcdf4cbaa",
        "type": "inject",
        "z": "c47b6131c613a62f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "433e62fcdf6f48a8"
            ]
        ]
    },
    {
        "id": "fd2d9cd12eaca0e1",
        "type": "inject",
        "z": "c47b6131c613a62f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "fbbcf835357c5267"
            ]
        ]
    },
    {
        "id": "c4928dd5a8fdfe40",
        "type": "ui_slider",
        "z": "621993a41d6b1896",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of air temperature",
        "group": "3f7bbcfbd61c4c3f",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": "-40",
        "max": "85",
        "step": 1,
        "className": "",
        "x": 510,
        "y": 160,
        "wires": [
            [
                "1225219c2f516dc2",
                "ad073282ca4b2cc8"
            ]
        ]
    },
    {
        "id": "7a2220cde9686de6",
        "type": "ui_slider",
        "z": "621993a41d6b1896",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of air temperature",
        "group": "3f7bbcfbd61c4c3f",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": "-40",
        "max": "85",
        "step": 1,
        "className": "",
        "x": 510,
        "y": 280,
        "wires": [
            [
                "642234d57634de8c",
                "2d35b2e130d4fd26"
            ]
        ]
    },
    {
        "id": "1225219c2f516dc2",
        "type": "ui_text",
        "z": "621993a41d6b1896",
        "group": "3f7bbcfbd61c4c3f",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 670,
        "y": 160,
        "wires": []
    },
    {
        "id": "642234d57634de8c",
        "type": "ui_text",
        "z": "621993a41d6b1896",
        "group": "3f7bbcfbd61c4c3f",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 670,
        "y": 280,
        "wires": []
    },
    {
        "id": "ad073282ca4b2cc8",
        "type": "function",
        "z": "621993a41d6b1896",
        "name": "minValue",
        "func": "flow.set(\"airTemperatureMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "c516df48e4319cd3"
            ]
        ]
    },
    {
        "id": "2d35b2e130d4fd26",
        "type": "function",
        "z": "621993a41d6b1896",
        "name": "maxValue",
        "func": "flow.set(\"airTemperatureMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 340,
        "wires": [
            [
                "c516df48e4319cd3"
            ]
        ]
    },
    {
        "id": "c516df48e4319cd3",
        "type": "function",
        "z": "621993a41d6b1896",
        "name": "airTemperature",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"airTemperatureMin\");\n    let max = flow.get(\"airTemperatureMax\");\n    let airTemperature = (Math.random() * (max - min) + min).toFixed(0);\n    global.set(\"airTemperature\", airTemperature);\n    msg.payload = airTemperature;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 260,
        "wires": [
            [
                "f412128e55ddd07e",
                "1c247d5d033c3e4a"
            ]
        ]
    },
    {
        "id": "f412128e55ddd07e",
        "type": "ui_gauge",
        "z": "621993a41d6b1896",
        "name": "airTemperatureReading",
        "group": "3f7bbcfbd61c4c3f",
        "order": 6,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "°C",
        "label": "°C",
        "format": "{{value}}",
        "min": "-40",
        "max": "85",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "60",
        "diff": false,
        "className": "",
        "x": 1290,
        "y": 260,
        "wires": []
    },
    {
        "id": "1c247d5d033c3e4a",
        "type": "function",
        "z": "621993a41d6b1896",
        "name": "airTemperatureMsg",
        "func": "if (global.get(\"control\") === true) {\n \n    // let airTemperature = global.get(\"airTemperature\");\n\n    // let payload = airTemperature;\n    msg.topic = \"temperature\";\n    //msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ea9bf7a7741778f2",
        "type": "function",
        "z": "621993a41d6b1896",
        "name": "default min",
        "func": "msg.payload = 25\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "c4928dd5a8fdfe40"
            ]
        ]
    },
    {
        "id": "a8dc07a56fa4bd18",
        "type": "function",
        "z": "621993a41d6b1896",
        "name": "default max",
        "func": "msg.payload = 29\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "7a2220cde9686de6"
            ]
        ]
    },
    {
        "id": "5204145a245d198e",
        "type": "inject",
        "z": "621993a41d6b1896",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "ea9bf7a7741778f2"
            ]
        ]
    },
    {
        "id": "d5ccafd4730f88db",
        "type": "inject",
        "z": "621993a41d6b1896",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "a8dc07a56fa4bd18"
            ]
        ]
    },
    {
        "id": "7eaea093de8f5847",
        "type": "function",
        "z": "621993a41d6b1896",
        "name": "apply anomaly",
        "func": "\nlet anomaly_percentage = parseFloat(flow.get(\"anomaly\")/100); // Set your anomaly percentage threshold here\nlet anomaly_simulated = false;\n\nlet currentValue = global.get(\"airTemperature\");\n\n//apply anomaly spike or drop\nif (Math.random() < anomaly_percentage) {\n\n    // Randomly choose between \"spike\" and \"drop\"\n    let anomaly_type = Math.random() < 0.5 ? \"spike\" : \"drop\";\n\n    let result;\n    if (anomaly_type === \"spike\") {\n        // Add a sudden spike\n        currentValue = (currentValue + (Math.random() * (4 - 2) + 2)).toFixed(2);\n    } else {\n        // Drop temperature suddenly\n        currentValue = (currentValue - (Math.random() * (4 - 2) + 2)).toFixed(2);\n    }\n}\n\nmsg.payload = currentValue;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "54f3e8a21c76ed80",
        "type": "ui_numeric",
        "z": "621993a41d6b1896",
        "d": true,
        "name": "",
        "label": "Anomaly %",
        "tooltip": "",
        "group": "3f7bbcfbd61c4c3f",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "anomaly",
        "topicType": "flow",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "step": "10",
        "className": "",
        "x": 670,
        "y": 680,
        "wires": [
            [
                "1e0dbf698cff8665"
            ]
        ]
    },
    {
        "id": "1e0dbf698cff8665",
        "type": "function",
        "z": "621993a41d6b1896",
        "name": "set anomaly %",
        "func": "flow.set(\"anomay\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 680,
        "wires": [
            [
                "7eaea093de8f5847"
            ]
        ]
    },
    {
        "id": "7cecba2e29946398",
        "type": "ui_slider",
        "z": "10f93b0893e21b6f",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of proximity",
        "group": "169cb7afdc1a1346",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "1300",
        "step": 1,
        "className": "",
        "x": 530,
        "y": 160,
        "wires": [
            [
                "d3e3b47989f78be9",
                "5ac3ba57aa52d360"
            ]
        ]
    },
    {
        "id": "9103c87c312e150b",
        "type": "ui_slider",
        "z": "10f93b0893e21b6f",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of proximity",
        "group": "169cb7afdc1a1346",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "1300",
        "step": 1,
        "className": "",
        "x": 530,
        "y": 280,
        "wires": [
            [
                "dd53ba6b7162037e",
                "83c5e959da636656"
            ]
        ]
    },
    {
        "id": "d3e3b47989f78be9",
        "type": "ui_text",
        "z": "10f93b0893e21b6f",
        "group": "169cb7afdc1a1346",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 690,
        "y": 160,
        "wires": []
    },
    {
        "id": "dd53ba6b7162037e",
        "type": "ui_text",
        "z": "10f93b0893e21b6f",
        "group": "169cb7afdc1a1346",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "5ac3ba57aa52d360",
        "type": "function",
        "z": "10f93b0893e21b6f",
        "name": "minValue",
        "func": "flow.set(\"proximityMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 220,
        "wires": [
            [
                "c94536b45caa0f24"
            ]
        ]
    },
    {
        "id": "83c5e959da636656",
        "type": "function",
        "z": "10f93b0893e21b6f",
        "name": "maxValue",
        "func": "flow.set(\"proximityMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 340,
        "wires": [
            [
                "c94536b45caa0f24"
            ]
        ]
    },
    {
        "id": "c94536b45caa0f24",
        "type": "function",
        "z": "10f93b0893e21b6f",
        "name": "proximity",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"proximityMin\");\n    let max = flow.get(\"proximityMax\");\n    let proximity = (Math.random() * (max - min) + min).toFixed(0);\n    global.set(\"proximity\", proximity);\n    msg.payload = proximity;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 260,
        "wires": [
            [
                "8dd033cbec9a45f2",
                "e42cb82dfc5e4680"
            ]
        ]
    },
    {
        "id": "8dd033cbec9a45f2",
        "type": "ui_gauge",
        "z": "10f93b0893e21b6f",
        "name": "proximityReading",
        "group": "169cb7afdc1a1346",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "mm",
        "label": "mm",
        "format": "{{value}}",
        "min": 0,
        "max": "1300",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1170,
        "y": 260,
        "wires": []
    },
    {
        "id": "e42cb82dfc5e4680",
        "type": "function",
        "z": "10f93b0893e21b6f",
        "name": "proximityMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let proximity = global.get(\"proximity\");\n    let payload = proximity;\n    msg.topic= \"proximity\";\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "e1d3dd0e4179157c",
        "type": "function",
        "z": "10f93b0893e21b6f",
        "name": "default min",
        "func": "msg.payload = 500\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 160,
        "wires": [
            [
                "7cecba2e29946398"
            ]
        ]
    },
    {
        "id": "9d00cf02feb88635",
        "type": "function",
        "z": "10f93b0893e21b6f",
        "name": "default max",
        "func": "msg.payload = 600\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 280,
        "wires": [
            [
                "9103c87c312e150b"
            ]
        ]
    },
    {
        "id": "e7a9aedd172d7cd5",
        "type": "inject",
        "z": "10f93b0893e21b6f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "e1d3dd0e4179157c"
            ]
        ]
    },
    {
        "id": "d249dea21dbea764",
        "type": "inject",
        "z": "10f93b0893e21b6f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "9d00cf02feb88635"
            ]
        ]
    },
    {
        "id": "d87edeb3bd642169",
        "type": "ui_slider",
        "z": "b1ba9d06785ac2cb",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of sound level",
        "group": "c9dd5760539df9d7",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 490,
        "y": 180,
        "wires": [
            [
                "dd383c1cccb110a4",
                "36657c4d4784c759"
            ]
        ]
    },
    {
        "id": "387e36e9200242a0",
        "type": "ui_slider",
        "z": "b1ba9d06785ac2cb",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of sound level",
        "group": "c9dd5760539df9d7",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 490,
        "y": 300,
        "wires": [
            [
                "538e691e6cb92def",
                "f06882a04c3324a9"
            ]
        ]
    },
    {
        "id": "dd383c1cccb110a4",
        "type": "ui_text",
        "z": "b1ba9d06785ac2cb",
        "group": "c9dd5760539df9d7",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 650,
        "y": 180,
        "wires": []
    },
    {
        "id": "538e691e6cb92def",
        "type": "ui_text",
        "z": "b1ba9d06785ac2cb",
        "group": "c9dd5760539df9d7",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 650,
        "y": 300,
        "wires": []
    },
    {
        "id": "36657c4d4784c759",
        "type": "function",
        "z": "b1ba9d06785ac2cb",
        "name": "minValue",
        "func": "flow.set(\"soundlevelMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 240,
        "wires": [
            [
                "e7b7f1c73553ab72"
            ]
        ]
    },
    {
        "id": "f06882a04c3324a9",
        "type": "function",
        "z": "b1ba9d06785ac2cb",
        "name": "maxValue",
        "func": "flow.set(\"soundlevelMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 360,
        "wires": [
            [
                "e7b7f1c73553ab72"
            ]
        ]
    },
    {
        "id": "e7b7f1c73553ab72",
        "type": "function",
        "z": "b1ba9d06785ac2cb",
        "name": "soundlevel",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"soundlevelMin\");\n    let max = flow.get(\"soundlevelMax\");\n    let soundlevel = (Math.random() * (max - min) + min).toFixed(0);\n    global.set(\"soundlevel\", soundlevel);\n    msg.payload = soundlevel;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 280,
        "wires": [
            [
                "58954199db16ea3d",
                "3d9d9ef26d2b618f"
            ]
        ]
    },
    {
        "id": "58954199db16ea3d",
        "type": "ui_gauge",
        "z": "b1ba9d06785ac2cb",
        "name": "soundlevelReading",
        "group": "c9dd5760539df9d7",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "dBa",
        "label": "dBa",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1130,
        "y": 280,
        "wires": []
    },
    {
        "id": "3d9d9ef26d2b618f",
        "type": "function",
        "z": "b1ba9d06785ac2cb",
        "name": "soundlevelMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let soundlevel = global.get(\"soundlevel\");\n    let payload = soundlevel;\n    msg.topic = \"sound_level\";\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "c881f6e457601201",
        "type": "function",
        "z": "b1ba9d06785ac2cb",
        "name": "default min",
        "func": "msg.payload = 40\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 180,
        "wires": [
            [
                "d87edeb3bd642169"
            ]
        ]
    },
    {
        "id": "9a935b7757bcd6ee",
        "type": "function",
        "z": "b1ba9d06785ac2cb",
        "name": "default max",
        "func": "msg.payload = 50\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 300,
        "wires": [
            [
                "387e36e9200242a0"
            ]
        ]
    },
    {
        "id": "25054e9bbec0a008",
        "type": "inject",
        "z": "b1ba9d06785ac2cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "c881f6e457601201"
            ]
        ]
    },
    {
        "id": "f1018ec1f56d80ba",
        "type": "inject",
        "z": "b1ba9d06785ac2cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "9a935b7757bcd6ee"
            ]
        ]
    },
    {
        "id": "3b8ed0422951c045",
        "type": "ui_slider",
        "z": "3b389ce3fe3353ee",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of axis accelaration",
        "group": "c610e7cdc4882a35",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": "2",
        "max": "16",
        "step": "2",
        "className": "",
        "x": 490,
        "y": 200,
        "wires": [
            [
                "9a8836726b2fd7a6",
                "5ff1a23c9aecd1a9"
            ]
        ]
    },
    {
        "id": "dff6bd3e7a239d59",
        "type": "ui_slider",
        "z": "3b389ce3fe3353ee",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of axis accelaration",
        "group": "c610e7cdc4882a35",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": "2",
        "max": "16",
        "step": "2",
        "className": "",
        "x": 490,
        "y": 320,
        "wires": [
            [
                "8aebf38c2027a0d4",
                "ded4c0266dd489a8"
            ]
        ]
    },
    {
        "id": "9a8836726b2fd7a6",
        "type": "ui_text",
        "z": "3b389ce3fe3353ee",
        "group": "c610e7cdc4882a35",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 650,
        "y": 200,
        "wires": []
    },
    {
        "id": "8aebf38c2027a0d4",
        "type": "ui_text",
        "z": "3b389ce3fe3353ee",
        "group": "c610e7cdc4882a35",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 650,
        "y": 320,
        "wires": []
    },
    {
        "id": "5ff1a23c9aecd1a9",
        "type": "function",
        "z": "3b389ce3fe3353ee",
        "name": "minValue",
        "func": "flow.set(\"axisAccelerationMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 260,
        "wires": [
            [
                "6e06fed84ed12f1c"
            ]
        ]
    },
    {
        "id": "ded4c0266dd489a8",
        "type": "function",
        "z": "3b389ce3fe3353ee",
        "name": "maxValue",
        "func": "flow.set(\"axisAccelerationMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 380,
        "wires": [
            [
                "6e06fed84ed12f1c"
            ]
        ]
    },
    {
        "id": "6e06fed84ed12f1c",
        "type": "function",
        "z": "3b389ce3fe3353ee",
        "name": "Axis Acceleration",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"axisAccelerationMin\");\n    let max = flow.get(\"axisAccelerationMax\");\n    let axis_acceleration = (Math.random() * (max - min) + min).toFixed(0);\n    global.set(\"axis_acceleration\", axis_acceleration);\n    msg.payload = axis_acceleration;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 300,
        "wires": [
            [
                "2bf2e7894bc6a59e",
                "64a27906978f2e9a"
            ]
        ]
    },
    {
        "id": "2bf2e7894bc6a59e",
        "type": "ui_gauge",
        "z": "3b389ce3fe3353ee",
        "name": "Axis Acceleration Reading",
        "group": "c610e7cdc4882a35",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "±g",
        "label": "±g",
        "format": "{{value}}",
        "min": "2",
        "max": "16",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1150,
        "y": 300,
        "wires": []
    },
    {
        "id": "64a27906978f2e9a",
        "type": "function",
        "z": "3b389ce3fe3353ee",
        "name": "AxisAccelerationMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let axisAcceleration = global.get(\"axis_acceleration\");\n    let payload = axisAcceleration;\n\n    msg.topic = \"axis_acceleration\";\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "19d280adf1e24bdb",
        "type": "function",
        "z": "3b389ce3fe3353ee",
        "name": "default min",
        "func": "msg.payload = 2\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            [
                "3b8ed0422951c045"
            ]
        ]
    },
    {
        "id": "57e2dfd1e6705cff",
        "type": "function",
        "z": "3b389ce3fe3353ee",
        "name": "default max",
        "func": "msg.payload = 6\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 320,
        "wires": [
            [
                "dff6bd3e7a239d59"
            ]
        ]
    },
    {
        "id": "b8335b296b425414",
        "type": "inject",
        "z": "3b389ce3fe3353ee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "19d280adf1e24bdb"
            ]
        ]
    },
    {
        "id": "7d865ee28100b734",
        "type": "inject",
        "z": "3b389ce3fe3353ee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "57e2dfd1e6705cff"
            ]
        ]
    },
    {
        "id": "f975e54b2cac3d5c",
        "type": "ui_slider",
        "z": "e9ff3bf64f065231",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of ambient light",
        "group": "b97195ddece4c07d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": "0.11",
        "max": "100000",
        "step": 1,
        "className": "",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "bc81123ff960fb3a",
                "e7a5441785898bb8"
            ]
        ]
    },
    {
        "id": "326e9b693513ba87",
        "type": "ui_slider",
        "z": "e9ff3bf64f065231",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of ambient light",
        "group": "b97195ddece4c07d",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": "0.11",
        "max": "100000",
        "step": 1,
        "className": "",
        "x": 470,
        "y": 280,
        "wires": [
            [
                "25ba62741b1d9e51",
                "1548b1a79744b537"
            ]
        ]
    },
    {
        "id": "bc81123ff960fb3a",
        "type": "ui_text",
        "z": "e9ff3bf64f065231",
        "group": "b97195ddece4c07d",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 630,
        "y": 160,
        "wires": []
    },
    {
        "id": "25ba62741b1d9e51",
        "type": "ui_text",
        "z": "e9ff3bf64f065231",
        "group": "b97195ddece4c07d",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 630,
        "y": 280,
        "wires": []
    },
    {
        "id": "e7a5441785898bb8",
        "type": "function",
        "z": "e9ff3bf64f065231",
        "name": "minValue",
        "func": "flow.set(\"lightMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 220,
        "wires": [
            [
                "2bcc877f2e59439a"
            ]
        ]
    },
    {
        "id": "1548b1a79744b537",
        "type": "function",
        "z": "e9ff3bf64f065231",
        "name": "maxValue",
        "func": "flow.set(\"lightMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 340,
        "wires": [
            [
                "2bcc877f2e59439a"
            ]
        ]
    },
    {
        "id": "2bcc877f2e59439a",
        "type": "function",
        "z": "e9ff3bf64f065231",
        "name": "Ambient Light",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"lightMin\");\n    let max = flow.get(\"lightMax\");\n    let light = (Math.random() * (max - min) + min).toFixed(2);\n    global.set(\"light\", light);\n    msg.payload = light;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "2d8ba2cbd085a112",
                "9b2a93b2f720a956"
            ]
        ]
    },
    {
        "id": "2d8ba2cbd085a112",
        "type": "ui_gauge",
        "z": "e9ff3bf64f065231",
        "name": "Ambient Light Reading",
        "group": "b97195ddece4c07d",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "lx",
        "label": "lx",
        "format": "{{value}}",
        "min": "0.11",
        "max": "100000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1120,
        "y": 260,
        "wires": []
    },
    {
        "id": "9b2a93b2f720a956",
        "type": "function",
        "z": "e9ff3bf64f065231",
        "name": "HarmfullGasesMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let light = global.get(\"light\");\n    let payload = light;\n    msg.topic = \"ambient_light\";\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "536afaa463b3e9b9",
        "type": "function",
        "z": "e9ff3bf64f065231",
        "name": "default min",
        "func": "msg.payload = 40000\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 160,
        "wires": [
            [
                "f975e54b2cac3d5c"
            ]
        ]
    },
    {
        "id": "5975a63df8c828f0",
        "type": "function",
        "z": "e9ff3bf64f065231",
        "name": "default max",
        "func": "msg.payload = 40500\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "326e9b693513ba87"
            ]
        ]
    },
    {
        "id": "96831f56d8e7f20d",
        "type": "inject",
        "z": "e9ff3bf64f065231",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "536afaa463b3e9b9"
            ]
        ]
    },
    {
        "id": "88753bb34fe3463f",
        "type": "inject",
        "z": "e9ff3bf64f065231",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "5975a63df8c828f0"
            ]
        ]
    },
    {
        "id": "1c3b31db884b7247",
        "type": "ui_slider",
        "z": "d8445566d5bec71c",
        "name": "Min",
        "label": "Min",
        "tooltip": "Minimum value of air temperature",
        "group": "0a8a060abc720105",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": "300",
        "max": "1000",
        "step": 1,
        "className": "",
        "x": 550,
        "y": 140,
        "wires": [
            [
                "192e53df8ccad093",
                "88bc68fa9ed9fd25"
            ]
        ]
    },
    {
        "id": "6eab28c499ae1905",
        "type": "ui_slider",
        "z": "d8445566d5bec71c",
        "name": "Max",
        "label": "Max",
        "tooltip": "Maximum value of air temperature",
        "group": "0a8a060abc720105",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "",
        "topicType": "str",
        "min": "300",
        "max": "1100",
        "step": 1,
        "className": "",
        "x": 550,
        "y": 260,
        "wires": [
            [
                "f66b9a1f7aaa4f1c",
                "640f492e0a843977"
            ]
        ]
    },
    {
        "id": "192e53df8ccad093",
        "type": "ui_text",
        "z": "d8445566d5bec71c",
        "group": "0a8a060abc720105",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 710,
        "y": 140,
        "wires": []
    },
    {
        "id": "f66b9a1f7aaa4f1c",
        "type": "ui_text",
        "z": "d8445566d5bec71c",
        "group": "0a8a060abc720105",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Value",
        "label": "Value:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 710,
        "y": 260,
        "wires": []
    },
    {
        "id": "88bc68fa9ed9fd25",
        "type": "function",
        "z": "d8445566d5bec71c",
        "name": "minValue",
        "func": "flow.set(\"pressureMin\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 200,
        "wires": [
            [
                "90f79f3da2077e85"
            ]
        ]
    },
    {
        "id": "640f492e0a843977",
        "type": "function",
        "z": "d8445566d5bec71c",
        "name": "maxValue",
        "func": "flow.set(\"pressureMax\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 320,
        "wires": [
            [
                "90f79f3da2077e85"
            ]
        ]
    },
    {
        "id": "90f79f3da2077e85",
        "type": "function",
        "z": "d8445566d5bec71c",
        "name": "Pressure",
        "func": "if (global.get(\"control\") === true) {\n    let min = flow.get(\"pressureMin\");\n    let max = flow.get(\"pressureMax\");\n    let pressure = (Math.random() * (max - min) + min).toFixed(2);\n    global.set(\"pressure\", pressure);\n    msg.payload = pressure;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 240,
        "wires": [
            [
                "94ec50ecc82ed307",
                "2cab2b9abe2d51f4"
            ]
        ]
    },
    {
        "id": "94ec50ecc82ed307",
        "type": "ui_gauge",
        "z": "d8445566d5bec71c",
        "name": "Pressure Reading",
        "group": "0a8a060abc720105",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "hPa",
        "label": "hPa",
        "format": "{{value}}",
        "min": "300",
        "max": "1100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1190,
        "y": 240,
        "wires": []
    },
    {
        "id": "2cab2b9abe2d51f4",
        "type": "function",
        "z": "d8445566d5bec71c",
        "name": "PressureMsg",
        "func": "if (global.get(\"control\") === true) {\n    let timestamp = Date.now();\n    let pressure = global.get(\"pressure\");\n    let payload = pressure;\n\n    msg.topic = \"pressure\";\n    msg.payload = payload;\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "ecc413d0d0c15bcf",
        "type": "function",
        "z": "d8445566d5bec71c",
        "name": "default min",
        "func": "msg.payload = 400\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "1c3b31db884b7247"
            ]
        ]
    },
    {
        "id": "f30696231346943d",
        "type": "function",
        "z": "d8445566d5bec71c",
        "name": "default max",
        "func": "msg.payload = 600\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 260,
        "wires": [
            [
                "6eab28c499ae1905"
            ]
        ]
    },
    {
        "id": "bdc4d35bd54d34a5",
        "type": "inject",
        "z": "d8445566d5bec71c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "ecc413d0d0c15bcf"
            ]
        ]
    },
    {
        "id": "de2c3e6796934a45",
        "type": "inject",
        "z": "d8445566d5bec71c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "f30696231346943d"
            ]
        ]
    },
    {
        "id": "954956eaed50a37a",
        "type": "function",
        "z": "6233aa5957a4c38f",
        "name": "do something on the edge",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "329ebd106554d36e",
        "type": "inject",
        "z": "d099f46e92b8877c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "0b1040bee15de252"
            ]
        ]
    },
    {
        "id": "0b1040bee15de252",
        "type": "debug",
        "z": "d099f46e92b8877c",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "c572387da20c3b76",
        "type": "function",
        "z": "924be2925f3ecf90",
        "name": "function 1",
        "func": "msg.payload = msg.payload  + \"from Edge (output 1)!\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "df701129619157c9",
        "type": "function",
        "z": "924be2925f3ecf90",
        "name": "function 2",
        "func": "msg.payload = msg.payload + \"from Edge (output 2)!\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "927e4698d04d7828",
        "type": "function",
        "z": "924be2925f3ecf90",
        "name": "function 3",
        "func": "msg.payload = msg.payload + \"from Edge (output 3)!\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "bbb5efef98f61b14",
        "type": "function",
        "z": "a1592475ef5a5656",
        "name": "control",
        "func": "// if (msg.topic === \"gate\") {\n//     context.pass = (msg.payload === true) ? true : false;\n//     global.set(\"control\", context.pass);\n//     return null;\n// }\n// if (context.pass) {\n//     return msg;\n// }\n// return null;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 340,
        "wires": [
            [
                "e84fb83504b81418",
                "cad50c00d8977388",
                "8a3e03ebcc518702",
                "9fdb416205431806",
                "bd89b902d072ba49",
                "946333e3308909d1",
                "29db10c58c6cef2b",
                "1820c98898b2ae2c"
            ]
        ]
    },
    {
        "id": "988cdf7dfd4dc194",
        "type": "debug",
        "z": "a1592475ef5a5656",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 160,
        "wires": []
    },
    {
        "id": "8174a648d0ec199c",
        "type": "mqtt out",
        "z": "a1592475ef5a5656",
        "name": "publish  to MQTT",
        "topic": "device/metrics",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ca4f07abb4d962ad",
        "x": 1780,
        "y": 400,
        "wires": []
    },
    {
        "id": "e84fb83504b81418",
        "type": "subflow:6d567f90c5f66d9a",
        "z": "a1592475ef5a5656",
        "name": "Harmfull Gasses",
        "x": 880,
        "y": 260,
        "wires": [
            [
                "1ee75a4391d453e4"
            ]
        ]
    },
    {
        "id": "cad50c00d8977388",
        "type": "subflow:c47b6131c613a62f",
        "z": "a1592475ef5a5656",
        "name": "Humidity",
        "env": [
            {
                "name": "Metric",
                "value": "humidity",
                "type": "str"
            }
        ],
        "x": 860,
        "y": 140,
        "wires": [
            [
                "1ee75a4391d453e4"
            ]
        ]
    },
    {
        "id": "8a3e03ebcc518702",
        "type": "subflow:621993a41d6b1896",
        "z": "a1592475ef5a5656",
        "name": "Temperature",
        "x": 870,
        "y": 60,
        "wires": [
            [
                "1ee75a4391d453e4"
            ]
        ]
    },
    {
        "id": "9fdb416205431806",
        "type": "subflow:10f93b0893e21b6f",
        "z": "a1592475ef5a5656",
        "name": "Proximity",
        "x": 860,
        "y": 340,
        "wires": [
            [
                "1ee75a4391d453e4"
            ]
        ]
    },
    {
        "id": "bd89b902d072ba49",
        "type": "subflow:b1ba9d06785ac2cb",
        "z": "a1592475ef5a5656",
        "name": "Sound Level",
        "x": 870,
        "y": 460,
        "wires": [
            [
                "1ee75a4391d453e4"
            ]
        ]
    },
    {
        "id": "946333e3308909d1",
        "type": "subflow:3b389ce3fe3353ee",
        "z": "a1592475ef5a5656",
        "name": "Axis Acceleration",
        "x": 880,
        "y": 560,
        "wires": [
            [
                "1ee75a4391d453e4"
            ]
        ]
    },
    {
        "id": "29db10c58c6cef2b",
        "type": "subflow:e9ff3bf64f065231",
        "z": "a1592475ef5a5656",
        "name": "Ambient Light",
        "x": 870,
        "y": 640,
        "wires": [
            [
                "1ee75a4391d453e4"
            ]
        ]
    },
    {
        "id": "1820c98898b2ae2c",
        "type": "subflow:d8445566d5bec71c",
        "z": "a1592475ef5a5656",
        "name": "Pressure",
        "x": 860,
        "y": 200,
        "wires": [
            [
                "1ee75a4391d453e4"
            ]
        ]
    },
    {
        "id": "1a2ee1b20530a359",
        "type": "function",
        "z": "a1592475ef5a5656",
        "name": "Parse",
        "func": "\nmsg.payload = [\n    {\n        temperature: parseFloat(msg.payload.temperature ?? 0),\n        humidity: parseFloat(msg.payload.humidity ?? 0),\n        pressure: parseFloat(msg.payload.pressure ?? 0),\n        harmful_gases: parseFloat(msg.payload.harmful_gases ?? 0),\n        proximity: parseFloat(msg.payload.proximity ?? 0),\n        sound_level: parseFloat(msg.payload.sound_level ?? 0),\n        axis_acceleration: parseFloat(msg.payload.axis_acceleration ?? 0),\n        ambient_light: parseFloat(msg.payload.temperature ?? 0)\n    },\n    {\n        device: \"ZUS80LP\"\n    }\n]\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 340,
        "wires": [
            [
                "988cdf7dfd4dc194",
                "8174a648d0ec199c"
            ]
        ]
    },
    {
        "id": "1ee75a4391d453e4",
        "type": "function",
        "z": "a1592475ef5a5656",
        "name": "wait for all",
        "func": "// Initialize context to store metrics\nlet metrics = context.get('metrics') || {};\n\n// Add the incoming payload to the metrics\nmetrics[msg.topic] = msg.payload;\n\n// Update the context with the new metrics\ncontext.set('metrics', metrics);\n\n// Send the updated metrics if all expected messages are received\nif (Object.keys(metrics).length === 8) {\n    msg.payload = metrics;\n    context.set('metrics', {}); // Reset the context\n    return msg; // Send combined metrics\n}\nreturn null; // Don't send anything until all metrics are collected\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 340,
        "wires": [
            [
                "1a2ee1b20530a359"
            ]
        ]
    },
    {
        "id": "e12aa06897f6facc",
        "type": "trigger",
        "z": "a1592475ef5a5656",
        "name": "Trigger every N seconds",
        "op1": "",
        "op2": "0",
        "op1type": "date",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 550,
        "y": 120,
        "wires": [
            [
                "bbb5efef98f61b14"
            ]
        ]
    },
    {
        "id": "f5f3c83ba1775709",
        "type": "function",
        "z": "a1592475ef5a5656",
        "name": "on/off control",
        "func": "if (msg.topic === \"gate\") {\n    context.pass = (msg.payload === true) ? true : false;\n    global.set(\"control\", context.pass);\n}\nif (context.pass) {\n    msg.payload = global.get(\"interval_delay\") || 10;\n    return msg;\n}\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 300,
        "wires": [
            [
                "4c2883555f310468",
                "70c1a26f4b655f70"
            ]
        ]
    },
    {
        "id": "4c2883555f310468",
        "type": "ui_dropdown",
        "z": "a1592475ef5a5656",
        "name": "Select Frequency",
        "label": "Inject Frequency",
        "tooltip": "",
        "place": "Select option",
        "group": "a4d0cf38f2fa8d7c",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "1 second",
                "value": "1",
                "type": "str"
            },
            {
                "label": "5 seconds",
                "value": "5",
                "type": "str"
            },
            {
                "label": "10 seconds",
                "value": "10",
                "type": "str"
            },
            {
                "label": "15 seconds",
                "value": "15",
                "type": "str"
            },
            {
                "label": "20 seconds",
                "value": "20",
                "type": "str"
            },
            {
                "label": "25 seconds",
                "value": "25",
                "type": "str"
            },
            {
                "label": "30 seconds",
                "value": "30",
                "type": "str"
            },
            {
                "label": "1 minute",
                "value": "60",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "interval_delay",
        "topicType": "flow",
        "className": "",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "c3107b87645314e8"
            ]
        ]
    },
    {
        "id": "4738e55ed2106543",
        "type": "ui_switch",
        "z": "a1592475ef5a5656",
        "name": "Start/Stop",
        "label": "Start/Stop Simulation",
        "tooltip": "Start sending telemetry data to MQTT",
        "group": "a4d0cf38f2fa8d7c",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "gate",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 340,
        "y": 580,
        "wires": [
            [
                "f5f3c83ba1775709"
            ]
        ]
    },
    {
        "id": "c3107b87645314e8",
        "type": "function",
        "z": "a1592475ef5a5656",
        "name": "set interval delay",
        "func": "let interval = msg.payload || 10;  // Default to 10 seconds if not set\n\n// Set the trigger interval in milliseconds\nmsg.delay = interval * 1000;\nglobal.set(\"interval_delay\", interval)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            [
                "e12aa06897f6facc"
            ]
        ]
    },
    {
        "id": "70c1a26f4b655f70",
        "type": "debug",
        "z": "a1592475ef5a5656",
        "d": true,
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 160,
        "wires": []
    },
    {
        "id": "f5b606761e57dd56",
        "type": "inject",
        "z": "a1592475ef5a5656",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 70,
        "y": 520,
        "wires": [
            [
                "4738e55ed2106543"
            ]
        ]
    },
    {
        "id": "1776346cd3e1709a",
        "type": "function",
        "z": "a1592475ef5a5656",
        "name": "apply anomaly",
        "func": "// Use the anomaly percentage from msg.anomalyPercentage, default to 20 if not set\nconst anomalyPercentage = flow.get(\"anomalyPercentage\") || 20 ;\n\n// Clone the payload array to avoid modifying the original directly\nconst modifiedPayload = [...msg.payload];\n\n// Check if payload[0] exists and is an object with sensor metrics\nif (modifiedPayload.length > 0 && typeof modifiedPayload[0] === \"object\") {\n    const sensorData = { ...modifiedPayload[0] };  // Clone the sensor metrics object\n\n    // Iterate over each metric in the sensor data object\n    Object.keys(sensorData).forEach(metric => {\n        // Skip non-numeric values (such as a device ID if present)\n        if (typeof sensorData[metric] !== \"number\") return;\n\n        const value = sensorData[metric];\n        const randomValue = Math.random();\n\n        if (randomValue < 0.3) {\n            // 30% chance of a hike\n            const hike = (1 + Math.random() * (anomalyPercentage / 100));\n            sensorData[metric] = parseFloat((value * hike).toFixed(2));\n        } else if (randomValue < 0.6) {\n            // 30% chance of a drop\n            const drop = (1 - Math.random() * (anomalyPercentage / 100));\n            sensorData[metric] = parseFloat((value * drop).toFixed(2));\n        }\n        // Otherwise, no change\n    });\n\n    // Replace the original sensor data object with the modified one in the array\n    modifiedPayload[0] = sensorData;\n}\n\n// Set the modified payload array back to msg.payload\nmsg.payload = modifiedPayload;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "957c3b9fa55f4903",
        "type": "ui_dropdown",
        "z": "a1592475ef5a5656",
        "d": true,
        "name": "Select Frequency",
        "label": "Anomaly %",
        "tooltip": "",
        "place": "Select option",
        "group": "a4d0cf38f2fa8d7c",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "10 %",
                "value": 10,
                "type": "num"
            },
            {
                "label": "20 %",
                "value": 20,
                "type": "num"
            },
            {
                "label": "30 %",
                "value": 30,
                "type": "num"
            },
            {
                "label": "40 %",
                "value": 40,
                "type": "num"
            },
            {
                "label": "50 %",
                "value": 50,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "interval_delay",
        "topicType": "flow",
        "className": "",
        "x": 1150,
        "y": 460,
        "wires": [
            [
                "8be706d6edfb9154"
            ]
        ]
    },
    {
        "id": "8be706d6edfb9154",
        "type": "change",
        "z": "a1592475ef5a5656",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "anomalyPercentage",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1400,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "65d55d3fac35f46c",
        "type": "http request",
        "z": "d140a7145998a80d",
        "name": "Call Grafana Api",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "body",
        "url": "http://grafana:3000/api/v1/provisioning/alert-rules/ddwxbtmmr6nlsa",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "Bearer glsa_2iZHCoRe0P4xOvzMbmrnf8RkRpnkZwN1_6d4e757f"
            },
            {
                "keyType": "other",
                "keyValue": "X-Disable-Provenance",
                "valueType": "other",
                "valueValue": "disabled"
            }
        ],
        "x": 660,
        "y": 300,
        "wires": [
            [
                "3c34549cc79b78f4"
            ]
        ]
    },
    {
        "id": "3c34549cc79b78f4",
        "type": "debug",
        "z": "d140a7145998a80d",
        "name": "show Grafana response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 300,
        "wires": []
    },
    {
        "id": "1a4c5e2ee2ffadea",
        "type": "function",
        "z": "d140a7145998a80d",
        "name": "airTemperatureMsg",
        "func": "let alert_temp = flow.get(\"alert_temp\");\ntry{\n    msg.payload = {\n        uid: \"cdxrkhwobuhogd\",\n        orgID: 1,\n        folderUID: \"bdxrgg9g36e4ga\",\n        ruleGroup: \"Sensors\",\n        title: \"Temperature Alert\",\n        condition: \"C\",\n        data: [\n            {\n                refId: \"A\",\n                queryType: \"\",\n                relativeTimeRange: {\n                    from: 600,\n                    to: 0\n                },\n                datasourceUid: \"ddwqd51wttou8f\",\n                model: {\n                    intervalMs: 1000,\n                    maxDataPoints: 43200,\n                    query: \"from(bucket: \\\"ZUS80LP\\\")\\r\\n  |\\u003E range(start: v.timeRangeStart, stop:v.timeRangeStop)\\r\\n  |\\u003E filter(fn: (r) =\\u003E\\r\\n    r._measurement == \\\"metrics\\\" and\\r\\n    r._field == \\\"temperature\\\" \\r\\n  )\",\n                    refId: \"A\"\n                }\n            },\n            {\n                refId: \"B\",\n                queryType: \"\",\n                relativeTimeRange: {\n                    from: 600,\n                    to: 0\n                },\n                datasourceUid: \"__expr__\",\n                model: {\n                    conditions: [\n                        {\n                            evaluator: {\n                                params: [],\n                                type: \"gt\"\n                            },\n                            operator: {\n                                type: \"and\"\n                            },\n                            query: {\n                                params: [\n                                    \"B\"\n                                ]\n                            },\n                            reducer: {\n                                params: [],\n                                type: \"last\"\n                            },\n                            type: \"query\"\n                        }\n                    ],\n                    datasource: {\n                        type: \"__expr__\",\n                        uid: \"__expr__\"\n                    },\n                    expression: \"A\",\n                    intervalMs: 1000,\n                    maxDataPoints: 43200,\n                    reducer: \"last\",\n                    refId: \"B\",\n                    type: \"reduce\"\n                }\n            },\n            {\n                refId: \"C\",\n                queryType: \"\",\n                relativeTimeRange: {\n                    from: 600,\n                    to: 0\n                },\n                datasourceUid: \"__expr__\",\n                model: {\n                    conditions: [\n                        {\n                            evaluator: {\n                                params: 0,\n                                type: \"gt\"\n                            },\n                            operator: {\n                                type: \"and\"\n                            },\n                            query: {\n                                params: [\n                                    \"C\"\n                                ]\n                            },\n                            reducer: {\n                                params: [],\n                                type: \"last\"\n                            },\n                            type: \"query\"\n                        }\n                    ],\n                    datasource: {\n                        type: \"__expr__\",\n                        uid: \"__expr__\"\n                    },\n                    expression: \"B\",\n                    intervalMs: 1000,\n                    maxDataPoints: 43200,\n                    refId: \"C\",\n                    type: \"threshold\"\n                }\n            }\n        ],\n        noDataState: \"NoData\",\n        execErrState: \"Error\",\n        for: \"5m\"\n    };\n\n\n\n} catch (error) {\n    node.error(\"Invalid JSON string\", msg);\n    return null; // Stop flow if JSON is invalid\n}\nmsg.payload.data[2].model.conditions[0].evaluator.params[0] = alert_temp;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 300,
        "wires": [
            [
                "65d55d3fac35f46c",
                "926514a85100a302"
            ]
        ]
    },
    {
        "id": "926514a85100a302",
        "type": "debug",
        "z": "d140a7145998a80d",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 440,
        "wires": []
    },
    {
        "id": "11ea7050721f9df5",
        "type": "mqtt in",
        "z": "0f8b93c6ce9ba9bd",
        "name": "UP",
        "topic": "application/9c955cb6-1a1c-493c-afbc-e77477bb0913/device/a840415cb459c15d/event/up",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "ca4f07abb4d962ad",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 140,
        "wires": [
            [
                "034db5cd68129249",
                "d20a25c0a12cad04",
                "38136d7454e138e5",
                "239852361ed7c91d",
                "01b4d6f28398f0b0",
                "6e4c3938ccd21838"
            ]
        ]
    },
    {
        "id": "6e4c3938ccd21838",
        "type": "debug",
        "z": "0f8b93c6ce9ba9bd",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 40,
        "wires": []
    },
    {
        "id": "034db5cd68129249",
        "type": "function",
        "z": "0f8b93c6ce9ba9bd",
        "name": "",
        "func": "var data = msg.payload[\"deviceInfo\"]\nvar decode = msg.payload[\"object\"]\nif (decode[\"Ext_sensor\"] == \"Temperature Sensor\"){\n    var f_port = msg.payload[\"fPort\"]\n    var f_cnt = msg.payload[\"fCnt\"]\n    var data2 = decode\n    var bat =data2[\"BatV\"]\n    var bat_status=data2[\"Bat_status\"]\n    var ext_sensor=data2[\"Ext_sensor\"]\n    var hum_SHT=data2[\"Hum_SHT\"]\n    if (\"TempC_DS\" in data2){\n        var tempC_DS=data2[\"TempC_DS\"]\n}\nelse {\n    tempC_DS=data2[\"TempC_TMP117\"]\n}\n\nvar tempC_SHT=data2[\"TempC_SHT\"]\nvar a1={payload:f_port},a2={payload:f_cnt},a3={payload:bat},a4={payload:bat_status},a5={payload:ext_sensor},\n a6={payload:hum_SHT},a7={payload:tempC_DS},a8={payload:tempC_SHT}\nreturn [a1,a2,a3,a4,a5,a6,a7,a8];\n\n}",
        "outputs": 9,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "054041c1f8ad740a"
            ],
            [
                "11286fbcb9419c65"
            ],
            [
                "6f74bac1ba605862"
            ],
            [
                "c9f618cca24db5e1"
            ],
            [
                "7f2fc42c4bcc6ff9"
            ],
            [
                "980646824d0c5239"
            ],
            [
                "a2ed445e50c952ea"
            ],
            [
                "13394b6f113fe555"
            ],
            []
        ]
    },
    {
        "id": "054041c1f8ad740a",
        "type": "ui_text",
        "z": "0f8b93c6ce9ba9bd",
        "group": "6c8dcef19b33b1ab",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "f_port",
        "label": "f_port",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "11286fbcb9419c65",
        "type": "ui_text",
        "z": "0f8b93c6ce9ba9bd",
        "group": "9d9e40253fa3a62f",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "f_cunt",
        "label": "f_cunt",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 770,
        "y": 200,
        "wires": []
    },
    {
        "id": "6f74bac1ba605862",
        "type": "ui_chart",
        "z": "0f8b93c6ce9ba9bd",
        "name": "bat",
        "group": "b24db75b1499c15f",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "bat",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 770,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c9f618cca24db5e1",
        "type": "ui_text",
        "z": "0f8b93c6ce9ba9bd",
        "group": "758898c4bead5e6f",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Bat_status",
        "label": "Bat_status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "7f2fc42c4bcc6ff9",
        "type": "ui_text",
        "z": "0f8b93c6ce9ba9bd",
        "group": "a8f02d8f9b3e80a1",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "Ext_sensor",
        "label": "Ext_sensor",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 790,
        "y": 320,
        "wires": []
    },
    {
        "id": "980646824d0c5239",
        "type": "ui_chart",
        "z": "0f8b93c6ce9ba9bd",
        "name": "Hum_SHT",
        "group": "a9ef53ea130e5557",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "Hum_SHT",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 790,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "a2ed445e50c952ea",
        "type": "ui_chart",
        "z": "0f8b93c6ce9ba9bd",
        "name": "TempC_sensor",
        "group": "1558cd7a030388f7",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "TempC_sensor",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "13394b6f113fe555",
        "type": "ui_chart",
        "z": "0f8b93c6ce9ba9bd",
        "name": "TempC_SHT",
        "group": "f523098714ee6cd6",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "TempC_SHT",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 790,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "d20a25c0a12cad04",
        "type": "function",
        "z": "0f8b93c6ce9ba9bd",
        "name": "",
        "func": "var data = msg.payload[\"deviceInfo\"]\nvar decode = msg.payload[\"object\"]\n    if (decode[\"Work_mode\"]==\"Interrupt Sensor send\"){\n    var f_port = msg.payload[\"fPort\"]\n    var f_cnt = msg.payload[\"fCnt\"]\n    var data2 = decode\n    var bat =data2[\"BatV\"]\n    var bat_status=data2[\"Bat_status\"]\n    var work_mode=data2[\"Work_mode\"]\n    var exti_pin_level=data2[\"Exti_pin_level\"]\n    var exti_status=data2[\"Exti_status\"]\n    var hum_SHT=data2[\"Hum_SHT\"]\n    var tempC_SHT=data2[\"TempC_SHT\"]\n    var a1={payload:f_port},a2={payload:f_cnt},a3={payload:bat},a4={payload:bat_status},a5={payload:work_mode},\n    a6={payload:exti_pin_level},a7={payload:exti_status},a8={payload:hum_SHT},a9={payload:tempC_SHT}\n    return [a1,a2,a3,a4,a5,a6,a7,a8,a9];\n}",
        "outputs": 9,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 440,
        "wires": [
            [
                "054041c1f8ad740a"
            ],
            [
                "11286fbcb9419c65"
            ],
            [
                "6f74bac1ba605862"
            ],
            [
                "c9f618cca24db5e1"
            ],
            [
                "7f2fc42c4bcc6ff9"
            ],
            [
                "0513bcb70cd63787"
            ],
            [
                "10eed06366dc18c4"
            ],
            [
                "980646824d0c5239"
            ],
            [
                "13394b6f113fe555"
            ]
        ]
    },
    {
        "id": "0513bcb70cd63787",
        "type": "ui_text",
        "z": "0f8b93c6ce9ba9bd",
        "group": "b1dc3cad430eb5b7",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "Exti_pin_level",
        "label": "Exti_pin_level",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 780,
        "y": 560,
        "wires": []
    },
    {
        "id": "10eed06366dc18c4",
        "type": "ui_text",
        "z": "0f8b93c6ce9ba9bd",
        "group": "4184be11e1179998",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "Exti_status",
        "label": "Exti_status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 770,
        "y": 600,
        "wires": []
    },
    {
        "id": "38136d7454e138e5",
        "type": "function",
        "z": "0f8b93c6ce9ba9bd",
        "name": "",
        "func": "var data = msg.payload[\"deviceInfo\"]\nvar decode = msg.payload[\"object\"]\nif (decode[\"Work_mode\"]==\"Interrupt Sensor count\"){\n    var f_port = msg.payload[\"fPort\"]\n    var f_cnt = msg.payload[\"fCnt\"]\n    var data2 = decode\n    var bat =data2[\"BatV\"]\n    var bat_status=data2[\"Bat_status\"]\n    var work_mode=data2[\"Work_mode\"]\n    var exit_count=data2[\"Exit_count\"]\n    var hum_SHT=data2[\"Hum_SHT\"]\n    var tempC_SHT=data2[\"TempC_SHT\"]\n    var a1={payload:f_port},a2={payload:f_cnt},a3={payload:bat},a4={payload:bat_status},a5={payload:work_mode},\n    a6={payload:exit_count},a8={payload:hum_SHT},a9={payload:tempC_SHT}\n    return [a1,a2,a3,a4,a5,a6,a8,a9];\n}",
        "outputs": 8,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 620,
        "wires": [
            [
                "054041c1f8ad740a"
            ],
            [
                "11286fbcb9419c65"
            ],
            [
                "6f74bac1ba605862"
            ],
            [
                "c9f618cca24db5e1"
            ],
            [
                "7f2fc42c4bcc6ff9"
            ],
            [
                "3914f37c12607c9f"
            ],
            [
                "980646824d0c5239"
            ],
            [
                "13394b6f113fe555"
            ]
        ]
    },
    {
        "id": "3914f37c12607c9f",
        "type": "ui_text",
        "z": "0f8b93c6ce9ba9bd",
        "group": "28cf5cca4c2c0bb5",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "exit_count",
        "label": "exit_count",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 790,
        "y": 700,
        "wires": []
    },
    {
        "id": "239852361ed7c91d",
        "type": "function",
        "z": "0f8b93c6ce9ba9bd",
        "name": "",
        "func": "var data = msg.payload[\"deviceInfo\"]\nvar decode = msg.payload[\"object\"]\nif (decode[\"Work_mode\"]==\"ADC Sensor\"){\n    var f_port = msg.payload[\"fPort\"]\n    var f_cnt = msg.payload[\"fCnt\"]\n    var data2 = decode\n    var bat =data2[\"BatV\"]\n    var bat_status=data2[\"Bat_status\"]\n    var work_mode=data2[\"Work_mode\"]\n    var adc_V=data2[\"ADC_V\"]\n    var hum_SHT=data2[\"Hum_SHT\"]\n    var tempC_SHT=data2[\"TempC_SHT\"]\n    var a1={payload:f_port},a2={payload:f_cnt},a3={payload:bat},a4={payload:bat_status},a5={payload:work_mode},\n    a6={payload:adc_V},a8={payload:hum_SHT},a9={payload:tempC_SHT}\n    return [a1,a2,a3,a4,a5,a6,a8,a9];\n}",
        "outputs": 8,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 760,
        "wires": [
            [
                "054041c1f8ad740a"
            ],
            [
                "11286fbcb9419c65"
            ],
            [
                "6f74bac1ba605862"
            ],
            [
                "c9f618cca24db5e1"
            ],
            [
                "7f2fc42c4bcc6ff9"
            ],
            [
                "605688b5e60df43d"
            ],
            [
                "980646824d0c5239"
            ],
            [
                "13394b6f113fe555"
            ]
        ]
    },
    {
        "id": "605688b5e60df43d",
        "type": "ui_chart",
        "z": "0f8b93c6ce9ba9bd",
        "name": "ADC_V",
        "group": "5f974d1fd1c0edfa",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "ADC_V",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "b9a88c202d86cca6",
        "type": "mqtt in",
        "z": "0f8b93c6ce9ba9bd",
        "name": "Event Ack",
        "topic": "application/9c955cb6-1a1c-493c-afbc-e77477bb0913/device/a840415cb459c15d/event/ack",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "ca4f07abb4d962ad",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1440,
        "wires": [
            [
                "b762912128fcfb62"
            ]
        ]
    },
    {
        "id": "b762912128fcfb62",
        "type": "debug",
        "z": "0f8b93c6ce9ba9bd",
        "name": "event ack",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1440,
        "wires": []
    },
    {
        "id": "ee6a400cdaf1160a",
        "type": "comment",
        "z": "0f8b93c6ce9ba9bd",
        "name": "Downlink commands ack",
        "info": "",
        "x": 230,
        "y": 1360,
        "wires": []
    },
    {
        "id": "a09398fd9effc82f",
        "type": "influxdb batch",
        "z": "0f8b93c6ce9ba9bd",
        "influxdb": "4ad3ce8d.582c5",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxdb_write",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "zemfyre",
        "bucket": "chirpstack",
        "x": 640,
        "y": 100,
        "wires": []
    },
    {
        "id": "01b4d6f28398f0b0",
        "type": "function",
        "z": "0f8b93c6ce9ba9bd",
        "name": "Convert",
        "func": "// Extract necessary data from the uplink\nconst uplink = msg.payload;\n\n// Example of sensor data from ChirpStack uplink\nconst deviceEUI = uplink.deviceInfo.devEui;            // Device EUI\nconst fPort = uplink.fPort;                // Frame Port\nconst rssi = uplink.rxInfo[0].rssi;        // RSSI from rxInfo array\nconst snr = uplink.rxInfo[0].snr;      // SNR\nconst sensorData = uplink.object;          // Decoded payload data (JSON)\n\n// InfluxDB measurement\nconst measurement = \"lorawan_uplink\";      // Measurement name in InfluxDB\n\n// Create an array of points for InfluxDB\nconst points = [];\nfor (const key in sensorData) {\n    // Ensure numeric fields are consistent\n    const value = parseFloat(sensorData[key]);\n    \n    // Only add points if the value is a valid number\n    if (!isNaN(value)) {\n        points.push({\n            measurement: measurement,\n            fields: {\n                value: value  // Ensure field type is float\n            },\n            tags: {\n                deviceEUI: deviceEUI,\n                name: key,\n            }\n        });\n    }\n}\n\n\n\n// msg.payload = [\n//     {\n//         temperature: parseFloat(msg.payload.temperature ?? 0),\n//         humidity: parseFloat(msg.payload.humidity ?? 0),\n//         pressure: parseFloat(msg.payload.pressure ?? 0),\n//         harmful_gases: parseFloat(msg.payload.harmful_gases ?? 0),\n//         proximity: parseFloat(msg.payload.proximity ?? 0),\n//         sound_level: parseFloat(msg.payload.sound_level ?? 0),\n//         axis_acceleration: parseFloat(msg.payload.axis_acceleration ?? 0),\n//         ambient_light: parseFloat(msg.payload.temperature ?? 0)\n//     },\n//     {\n//         device: \"ZUS80LP\"\n//     }\n// ]\n\n\n// Pass the array of points to the InfluxDB node\nmsg.payload = points;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "a09398fd9effc82f",
                "6e4c3938ccd21838"
            ]
        ]
    },
    {
        "id": "38a14f21.7ff638",
        "type": "link out",
        "z": "9f80fd1f.3bd908",
        "name": "data_gen",
        "mode": "link",
        "links": [
            "be3b1e8c001db67a",
            "ecef8cf0f9a01c4b"
        ],
        "x": 1105,
        "y": 460,
        "wires": []
    },
    {
        "id": "20da19e9.da8926",
        "type": "mqtt in",
        "z": "9f80fd1f.3bd908",
        "name": "FA_Drives-Data source",
        "topic": "ie/d/j/simatic/v1/opcuac1/dp/r/FA_Drives/default",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 220,
        "y": 280,
        "wires": [
            [
                "971f6ffe.7241f"
            ]
        ]
    },
    {
        "id": "971f6ffe.7241f",
        "type": "function",
        "z": "9f80fd1f.3bd908",
        "name": "Convert S7 Connecor JSON to InfluxDB JSON",
        "func": "var id2NameMap = global.get(\"id2NameMap\")\nvar id2DataTypeMap = global.get(\"id2DataTypeMap\")\n\nlet msgoutput={}\n\nlet bulk = JSON.parse(msg.payload);\n//node.warn(bulk)\nmsgoutput.payload = new Array(bulk.vals.size);\n\nfor (var i = 0; i < bulk.vals.length; i++) {\n    let record = bulk.vals[i]\n\n    msgoutput.payload[i] = {\n        measurement: id2NameMap.get(record.id),\n        fields: {\n            value: Math.round(record.val * 1e2)/ 1e2,\n            name: id2NameMap.get(record.id),\n            qualitycode: false\n        },\n        timestamp: new Date(record.ts)\n    }\n    \n}\n\nreturn msgoutput;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 280,
        "wires": [
            [
                "d20bf630.ac7c98",
                "50556ca2.120a8c",
                "6d21e9a.2814a98"
            ]
        ]
    },
    {
        "id": "93f44c93.8b63e",
        "type": "comment",
        "z": "9f80fd1f.3bd908",
        "name": "### Map variable id to variable name so that it is human readable ###",
        "info": "",
        "x": 370,
        "y": 40,
        "wires": []
    },
    {
        "id": "fdc0f327.a560a",
        "type": "mqtt in",
        "z": "9f80fd1f.3bd908",
        "name": "",
        "topic": "ie/m/j/simatic/v1/opcuac1/dp",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "b18c8995.ce3c7",
                "43428e95.c95d58"
            ]
        ]
    },
    {
        "id": "b18c8995.ce3c7",
        "type": "function",
        "z": "9f80fd1f.3bd908",
        "name": "",
        "func": "var id2NameMap = global.get(\"id2NameMap\")\nvar id2DataTypeMap = global.get(\"id2DataTypeMap\")\n\nif(id2NameMap == undefined || id2DataTypeMap == undefined ){\n    id2NameMap = new Map(); \n    id2DataTypeMap = new Map(); \n}\n\nlet connectionName = \"FA_Drives\"; // Name of the connection\n\n\nlet m = JSON.parse(msg.payload);\n\n\n// Mapping ID -> Variable Name\n// Mapping ID -> Variable Data Type\nm.connections.forEach(connection => \n{\n    if(connection.name == connectionName) {\n        let datapointobjects = connection.dataPoints;\n        \n        datapointobjects.forEach( datapoint => {\n            datapoint.dataPointDefinitions.forEach( definition => {\n                id2NameMap.set(definition.id, definition.name) // Mapping ID -> Variable Name\n                id2DataTypeMap.set(definition.id, definition.dataType) // Mapping ID -> Variable Data Type \n            })\n           \n        })\n    }\n    \n})\n\nglobal.set(\"id2NameMap\", id2NameMap)\nglobal.set(\"id2DataTypeMap\", id2DataTypeMap)\n\nmsg.payload = id2NameMap\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 140,
        "wires": [
            [
                "43428e95.c95d58"
            ]
        ]
    },
    {
        "id": "43428e95.c95d58",
        "type": "debug",
        "z": "9f80fd1f.3bd908",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 100,
        "wires": []
    },
    {
        "id": "5c1c9dcd.546984",
        "type": "comment",
        "z": "9f80fd1f.3bd908",
        "name": "### Retrieve data from OPC UA connector and replace variable ID with variable Name and puslish as Array ###",
        "info": "",
        "x": 500,
        "y": 220,
        "wires": []
    },
    {
        "id": "d20bf630.ac7c98",
        "type": "debug",
        "z": "9f80fd1f.3bd908",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 280,
        "wires": []
    },
    {
        "id": "50556ca2.120a8c",
        "type": "influxdb batch",
        "z": "9f80fd1f.3bd908",
        "influxdb": "4ad3ce8d.582c5",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "siemens",
        "bucket": "edgedb",
        "x": 1030,
        "y": 360,
        "wires": []
    },
    {
        "id": "6d21e9a.2814a98",
        "type": "split",
        "z": "9f80fd1f.3bd908",
        "name": "Split S7 Array",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 860,
        "y": 480,
        "wires": [
            [
                "38a14f21.7ff638"
            ]
        ]
    },
    {
        "id": "5baa825a.490d5c",
        "type": "comment",
        "z": "9f80fd1f.3bd908",
        "name": "### Connection error on MQTT nodes  please do the following steps ###",
        "info": "",
        "x": 310,
        "y": 460,
        "wires": []
    },
    {
        "id": "6d514375.dddf04",
        "type": "comment",
        "z": "9f80fd1f.3bd908",
        "name": "### 1. Open configuration node view ###",
        "info": "",
        "x": 220,
        "y": 500,
        "wires": []
    },
    {
        "id": "fea16ee2.9b9548",
        "type": "comment",
        "z": "9f80fd1f.3bd908",
        "name": "### 2. Double-Click on Databus node and select tab security###",
        "info": "",
        "x": 290,
        "y": 540,
        "wires": []
    },
    {
        "id": "c946b764.ac1338",
        "type": "comment",
        "z": "9f80fd1f.3bd908",
        "name": "### 3. Enter user 'edge' and password 'edge' ###",
        "info": "",
        "x": 240,
        "y": 580,
        "wires": []
    },
    {
        "id": "3bea85d5.8166ea",
        "type": "comment",
        "z": "9f80fd1f.3bd908",
        "name": "### 4. Click 'Finish' and deploy flows again ###",
        "info": "",
        "x": 240,
        "y": 620,
        "wires": []
    },
    {
        "id": "32a48b8c.b60274",
        "type": "comment",
        "z": "9f80fd1f.3bd908",
        "name": "### Please wait till 50 values are retrived so that you can see the results in the Influx UI view ###",
        "info": "",
        "x": 390,
        "y": 420,
        "wires": []
    },
    {
        "id": "210128b3065fac4a",
        "type": "function",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "name": "store data",
        "func": "\nmsgoutput={}\n//msgoutput.measurement = msg.topic.split(';')[1].slice(2);\n/*msgoutput.payload = {\n    serverTimestamp: msg.serverTimestamp.toISOString(),\n    value: Math.round(msg.payload * 1e2)/ 1e2,\n    name: msgoutput.measurement,\n}*/\n\nBeta = [{\n    measurement: msg.topic.split(';')[1].slice(2),\n    fields:{\n        name: msg.topic.split(';')[1].slice(2),\n        value: Math.round(msg.payload * 1e2)/ 1e2,\n        qualitycode: false\n    },\n    timestamp: new Date()\n}]\n\nmsgoutput.payload = Beta;\n\nreturn msgoutput;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 880,
        "wires": [
            [
                "832cbcfb18a82ae0",
                "52a7853f068a139e",
                "82dbdbd7e8fb888b"
            ]
        ]
    },
    {
        "id": "373c3ebdfc8962a1",
        "type": "debug",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "name": "opc output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 730,
        "y": 820,
        "wires": []
    },
    {
        "id": "832cbcfb18a82ae0",
        "type": "debug",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "name": "output to influx",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 970,
        "y": 820,
        "wires": []
    },
    {
        "id": "5bd466858aba7401",
        "type": "inject",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "name": "powerdrive2-Temp",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=temperatur2;datatype=Float",
        "payload": "1000",
        "payloadType": "num",
        "x": 190,
        "y": 960,
        "wires": [
            [
                "0b315d77e029d17d"
            ]
        ]
    },
    {
        "id": "c0f358edb13dbafc",
        "type": "inject",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "name": "powerdrive1",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=powerdrive1;datatype=Float",
        "payload": "2000",
        "payloadType": "num",
        "x": 210,
        "y": 920,
        "wires": [
            [
                "0b315d77e029d17d"
            ]
        ]
    },
    {
        "id": "97a9776eb04e43d6",
        "type": "inject",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "name": "powerdrive2",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=powerdrive2;datatype=Float",
        "payload": "2000",
        "payloadType": "num",
        "x": 210,
        "y": 880,
        "wires": [
            [
                "0b315d77e029d17d"
            ]
        ]
    },
    {
        "id": "ec42e72ae8ffaf5a",
        "type": "inject",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "name": "currentdrive1",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=currentdrive1;datatype=Float",
        "payload": "1000",
        "payloadType": "num",
        "x": 200,
        "y": 840,
        "wires": [
            [
                "0b315d77e029d17d"
            ]
        ]
    },
    {
        "id": "aa17ff32ee7ed707",
        "type": "inject",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "name": "voltagedrive1",
        "props": [
            {
                "p": "payload",
                "v": "1000",
                "vt": "num"
            },
            {
                "p": "topic",
                "v": "ns=1;s=voltagedrive1;datatype=Double",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=1;s=voltagedrive1;datatype=Double",
        "payload": "1000",
        "payloadType": "num",
        "x": 200,
        "y": 800,
        "wires": [
            [
                "0b315d77e029d17d"
            ]
        ]
    },
    {
        "id": "0b315d77e029d17d",
        "type": "OpcUa-Client",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "endpoint": "1b70cc5299eb3297",
        "action": "subscribe",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "1",
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "name": "",
        "x": 502,
        "y": 859,
        "wires": [
            [
                "210128b3065fac4a",
                "373c3ebdfc8962a1"
            ],
            []
        ]
    },
    {
        "id": "52a7853f068a139e",
        "type": "influxdb batch",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "influxdb": "4ad3ce8d.582c5",
        "precision": "",
        "retentionPolicy": "",
        "name": "write_data_influxdb",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "siemens",
        "bucket": "edgedb",
        "x": 970,
        "y": 900,
        "wires": []
    },
    {
        "id": "4233eb0a43d330f1",
        "type": "comment",
        "z": "9f80fd1f.3bd908",
        "name": "### For testing - Receive simulated data from a OPC UA Server  ###",
        "info": "",
        "x": 340,
        "y": 740,
        "wires": []
    },
    {
        "id": "82dbdbd7e8fb888b",
        "type": "link out",
        "z": "9f80fd1f.3bd908",
        "d": true,
        "name": "data_gen",
        "mode": "link",
        "links": [
            "be3b1e8c001db67a",
            "ecef8cf0f9a01c4b"
        ],
        "x": 905,
        "y": 960,
        "wires": []
    },
    {
        "id": "1ac34de4909180b7",
        "type": "comment",
        "z": "7474ceb842992a1a",
        "name": "Calculate Total Power Consumption",
        "info": "",
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "24d36f2e8f195da4",
        "type": "function",
        "z": "7474ceb842992a1a",
        "name": "Query-List",
        "func": "var a ='\"name\"'\n//msg.query=\"select * from powerdrive1 where \"+a+\"='powerdrive1'\"\nmsg.query= `from(bucket: \"edgedb\")\n  |> range(start: -5h)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerdrive1\")\n  |> last()`;\nreturn msg; \n/*\nCLI-Funktionen f?r die Influxdb (Auszug)\n\"select * from data1\"\n//Zeigt alle Daten im measuurement an\nSELECT * FROM data where time > '2018-08-09T08:20:39.96Z' and time <= now()\n//Anzeige der measuremebts in einem bestimmten Zeitraum\nselect * from data where value > 80 and value < 85 \n//Filterung der Daten nach Value \n*/",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 160,
        "wires": [
            [
                "a3698549a82e281c"
            ]
        ]
    },
    {
        "id": "d91e47171d708254",
        "type": "function",
        "z": "7474ceb842992a1a",
        "name": "Query-List",
        "func": "var a ='\"name\"'\n//msg.query=\"select * from powerdrive2 where \"+a+\"='powerdrive2'\"\nmsg.query= `from(bucket: \"edgedb\")\n  |> range(start: -5m)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"powerdrive2\")\n  |> last()`;\nreturn msg; \n\n\n/*\nCLI-Funktionen f?r die Influxdb (Auszug)\n\"select * from data1\"\n//Zeigt alle Daten im measuurement an\nSELECT * FROM data where time > '2018-08-09T08:20:39.96Z' and time <= now()\n//Anzeige der measuremebts in einem bestimmten Zeitraum\nselect * from data where value > 80 and value < 85 \n//Filterung der Daten nach Value \n*/\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 220,
        "wires": [
            [
                "e72876fc847d9707"
            ]
        ]
    },
    {
        "id": "e72876fc847d9707",
        "type": "influxdb in",
        "z": "7474ceb842992a1a",
        "influxdb": "4ad3ce8d.582c5",
        "name": "influxdb_query_power2",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "14b0503b4d11a1f1",
                "d324e4d979f80857"
            ]
        ]
    },
    {
        "id": "14b0503b4d11a1f1",
        "type": "function",
        "z": "7474ceb842992a1a",
        "name": "collect_last_power_values",
        "func": "context.data = context.data || {};\n\nswitch (msg.payload[0]._measurement) {\n    case \"powerdrive1\":\n        context.data.power1 = msg.payload[2]._value;\n        msg = null;\n        break;\n    case \"powerdrive2\":\n        context.data.power2 = msg.payload[2]._value;\n        msg = null;\n        break;\n    default:\n        msg = null;\n        break;\n}\n\nif (context.data.power1 != null && context.data.power2 != null) {\n    msg2 = {};\n    msg2 = context.data;\n\n    context.data = null;\n    return msg2;\n} else {\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 2,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 220,
        "wires": [
            [
                "16a3f64e6e4cb01f",
                "fd2ecb26787fa544"
            ]
        ]
    },
    {
        "id": "797b84ead1704e99",
        "type": "function",
        "z": "7474ceb842992a1a",
        "name": "join_and_write_power_Influxdb",
        "func": "total = msg.payload;\n\nBeta = [{\n    measurement: \"GEN_KPI_TotalPower\",\n    fields: {\n        name: \"TotalPower\",\n        value: total,\n        //weitereTags: -100 //(optional) nur 4 Datatypes sind in der Influxdb akzeptiert: Int,Float,String, Bool\n    },\n    timestamp: new Date()\n}]\n//    Arr.push(Beta);\n//}\n\nmsg.payload = Beta;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 4,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 220,
        "wires": [
            [
                "5d341f7d40ab6696",
                "cf316c5feaf54b75"
            ]
        ]
    },
    {
        "id": "cf316c5feaf54b75",
        "type": "influxdb batch",
        "z": "7474ceb842992a1a",
        "influxdb": "4ad3ce8d.582c5",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxdb_write",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "siemens",
        "bucket": "edgedb",
        "x": 1520,
        "y": 180,
        "wires": []
    },
    {
        "id": "a3698549a82e281c",
        "type": "influxdb in",
        "z": "7474ceb842992a1a",
        "influxdb": "4ad3ce8d.582c5",
        "name": "influxdb_query_power1",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "14b0503b4d11a1f1",
                "d324e4d979f80857"
            ]
        ]
    },
    {
        "id": "ecef8cf0f9a01c4b",
        "type": "link in",
        "z": "7474ceb842992a1a",
        "name": "",
        "links": [
            "38a14f21.7ff638",
            "82dbdbd7e8fb888b"
        ],
        "x": 135,
        "y": 220,
        "wires": [
            [
                "24d36f2e8f195da4",
                "d91e47171d708254"
            ]
        ]
    },
    {
        "id": "16a3f64e6e4cb01f",
        "type": "function",
        "z": "7474ceb842992a1a",
        "name": "sum_total_power",
        "func": "var arr = [];\nvar mean = 0;\nvar sum = 0;\n\narr = Object.keys(msg).map(function(key) {\n    return msg[key]\n})\narr.splice(-1, 1)\n\nfor (var i = 0; i < arr.length; i++) {\n    sum = sum + arr[i];\n}\n// mean = sum / arr.length; \n\nmsg2 = {};\n//msg2.payload = (arr[0] + arr[1] + arr[2]) / arr.length; \n\nmsg2.payload = sum;\nreturn msg2;",
        "outputs": 1,
        "timeout": "",
        "noerr": 1,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "797b84ead1704e99"
            ]
        ]
    },
    {
        "id": "5d341f7d40ab6696",
        "type": "debug",
        "z": "7474ceb842992a1a",
        "name": "KPI-Power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1510,
        "y": 260,
        "wires": []
    },
    {
        "id": "fd2ecb26787fa544",
        "type": "debug",
        "z": "7474ceb842992a1a",
        "name": "Last Power Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "8b8c3adc7921a640",
        "type": "debug",
        "z": "7474ceb842992a1a",
        "name": "KPI-Power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 300,
        "wires": []
    },
    {
        "id": "d324e4d979f80857",
        "type": "function",
        "z": "7474ceb842992a1a",
        "name": "collect_last_power_values",
        "func": "context.data = context.data || {};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 380,
        "wires": [
            [
                "8b8c3adc7921a640"
            ]
        ]
    },
    {
        "id": "c17d056bfe661bfb",
        "type": "influxdb in",
        "z": "1ff02d49d32ca74f",
        "influxdb": "4ad3ce8d.582c5",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 770,
        "y": 140,
        "wires": [
            [
                "97ada85a60986d3d"
            ]
        ]
    },
    {
        "id": "be3b1e8c001db67a",
        "type": "link in",
        "z": "1ff02d49d32ca74f",
        "name": "input_raw_data",
        "links": [
            "38a14f21.7ff638",
            "82dbdbd7e8fb888b"
        ],
        "x": 185,
        "y": 160,
        "wires": [
            [
                "be65079f10c41189"
            ]
        ]
    },
    {
        "id": "efd211984f39259b",
        "type": "function",
        "z": "1ff02d49d32ca74f",
        "name": "GET_LAST_ENTRIES",
        "func": "let msgQueryGet = {}\nmsgQueryGet.measurement = msg.payload.measurement\n\nmsgQueryGet.query= `from(bucket: \"edgedb\")\n                      |> range(start: -5h)\n                      |> filter(fn: (r) => r[\"_measurement\"] == \"${msgQueryGet.measurement}\")\n                      |> filter(fn: (r) => r[\"_field\"] == \"value\")\n                      |> sort(columns: [\"_time\"], desc: true)\n                      |> limit(n: 50)\n                      |> group()`;\nreturn msgQueryGet;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 140,
        "wires": [
            [
                "c17d056bfe661bfb"
            ]
        ]
    },
    {
        "id": "22c5dc214c72eeb6",
        "type": "mqtt out",
        "z": "1ff02d49d32ca74f",
        "name": "StandardKpis",
        "topic": "StandardKpis",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1ab7e97a.bda1e7",
        "x": 1180,
        "y": 140,
        "wires": []
    },
    {
        "id": "97ada85a60986d3d",
        "type": "json",
        "z": "1ff02d49d32ca74f",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 910,
        "y": 140,
        "wires": [
            [
                "98936ecf14b1220d",
                "22c5dc214c72eeb6"
            ]
        ]
    },
    {
        "id": "98936ecf14b1220d",
        "type": "debug",
        "z": "1ff02d49d32ca74f",
        "name": "response_get",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 220,
        "wires": []
    },
    {
        "id": "ad4f6d543b736f83",
        "type": "comment",
        "z": "1ff02d49d32ca74f",
        "name": "PowerDrive1 and PowerDrive2 last 50 entries",
        "info": "",
        "x": 550,
        "y": 80,
        "wires": []
    },
    {
        "id": "b92d4778a8765068",
        "type": "influxdb in",
        "z": "1ff02d49d32ca74f",
        "influxdb": "4ad3ce8d.582c5",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 730,
        "y": 340,
        "wires": [
            [
                "da5a71e0e50b6a2d"
            ]
        ]
    },
    {
        "id": "3cc3c6c7bd32b8fd",
        "type": "debug",
        "z": "1ff02d49d32ca74f",
        "name": "mqtt output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 520,
        "wires": []
    },
    {
        "id": "1a526d08fd3a5196",
        "type": "mqtt out",
        "z": "1ff02d49d32ca74f",
        "name": "Mean",
        "topic": "Mean",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1ab7e97a.bda1e7",
        "x": 1290,
        "y": 400,
        "wires": []
    },
    {
        "id": "bcc37a8b4d68d059",
        "type": "comment",
        "z": "1ff02d49d32ca74f",
        "name": "VoltageDrive3 dynamic sample of entries",
        "info": "",
        "x": 560,
        "y": 260,
        "wires": []
    },
    {
        "id": "98d95adec7f11faf",
        "type": "influxdb in",
        "z": "1ff02d49d32ca74f",
        "influxdb": "4ad3ce8d.582c5",
        "name": "query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "siemens",
        "x": 750,
        "y": 500,
        "wires": [
            [
                "da5a71e0e50b6a2d"
            ]
        ]
    },
    {
        "id": "8e801bd99a2e77b6",
        "type": "comment",
        "z": "1ff02d49d32ca74f",
        "name": "CurrentDrive3  dynamic sample of entries",
        "info": "",
        "x": 560,
        "y": 440,
        "wires": []
    },
    {
        "id": "be65079f10c41189",
        "type": "switch",
        "z": "1ff02d49d32ca74f",
        "name": "filter",
        "property": "payload.measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "powerdrive1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "powerdrive2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "voltagedrive3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "currentdrive3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 290,
        "y": 160,
        "wires": [
            [
                "efd211984f39259b"
            ],
            [
                "efd211984f39259b"
            ],
            [
                "50952f79f64eb614"
            ],
            [
                "46b6e48d1b12352a"
            ]
        ]
    },
    {
        "id": "da5a71e0e50b6a2d",
        "type": "function",
        "z": "1ff02d49d32ca74f",
        "name": "manual_join",
        "func": "var tempo_cd3_batch = context.get('cd3_batch')||[];\nvar tempo_vd3_batch = context.get('vd3_batch')||[];\n\nfunction build_analytics_object(){\n    let data_obj = {\n        sample_number : msg.SampleNumber,\n        current_drive3_batch : tempo_cd3_batch,\n        voltage_drive3_batch : tempo_vd3_batch,\n    }\n    return data_obj\n}\n\n\nif (msg.measurement == 'currentdrive3'){\n    tempo_cd3_batch = msg.payload\n    context.set('cd3_batch',tempo_cd3_batch)\n    \n}\nelse if (msg.measurement == 'voltagedrive3') {\n    tempo_vd3_batch = msg.payload\n    context.set('vd3_batch',tempo_vd3_batch)\n}\n\nif (tempo_cd3_batch.length > 0 && tempo_vd3_batch.length >0 ) {\n    let py_obj={}\n    py_obj.payload = build_analytics_object()\n    tempo_cd3_batch = []\n    tempo_vd3_batch = []\n    context.set('cd3_batch', tempo_cd3_batch)\n    context.set('vd3_batch', tempo_vd3_batch)\n    \n    return py_obj\n    \n}\n\nelse{\n    return\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 400,
        "wires": [
            [
                "3cc3c6c7bd32b8fd",
                "1a526d08fd3a5196"
            ]
        ]
    },
    {
        "id": "7bce0dac6af8be62",
        "type": "mqtt in",
        "z": "1ff02d49d32ca74f",
        "name": "",
        "topic": "StandardKpiResult",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 130,
        "y": 820,
        "wires": [
            [
                "78ccf7c99d23ca4d"
            ]
        ]
    },
    {
        "id": "bbcadf72240b8428",
        "type": "debug",
        "z": "1ff02d49d32ca74f",
        "name": "response standard kpis",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 780,
        "wires": []
    },
    {
        "id": "78ccf7c99d23ca4d",
        "type": "json",
        "z": "1ff02d49d32ca74f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 820,
        "wires": [
            [
                "8f26ae08dabcb38e"
            ]
        ]
    },
    {
        "id": "8f26ae08dabcb38e",
        "type": "function",
        "z": "1ff02d49d32ca74f",
        "name": "store data",
        "func": "let my_payload = {};\nmy_payload = msg.payload;\nlet output_standardkpis = {}\noutput_standardkpis.measurement = my_payload.name.toUpperCase() + '_STANDARD_KPIS'\noutput_standardkpis.payload = {\n    mean: Math.round(my_payload.mean_result * 1e2)/ 1e2,\n    median: Math.round(my_payload.median_result * 1e2)/ 1e2,\n    stddev: Math.round(my_payload.stddev_result * 1e2)/ 1e2,\n    name: my_payload.name,\n}\n\nreturn output_standardkpis;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 820,
        "wires": [
            [
                "2cdca5c6f88b0194",
                "bbcadf72240b8428"
            ]
        ]
    },
    {
        "id": "2cdca5c6f88b0194",
        "type": "influxdb out",
        "z": "1ff02d49d32ca74f",
        "influxdb": "4ad3ce8d.582c5",
        "name": "write_influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "siemens",
        "bucket": "edgedb",
        "x": 1200,
        "y": 820,
        "wires": []
    },
    {
        "id": "d4be09607b515978",
        "type": "mqtt in",
        "z": "1ff02d49d32ca74f",
        "name": "",
        "topic": "MeanResult",
        "qos": "2",
        "datatype": "auto",
        "broker": "1ab7e97a.bda1e7",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 960,
        "wires": [
            [
                "186ea90f99e29d7b"
            ]
        ]
    },
    {
        "id": "8153c1341ba5dcd2",
        "type": "debug",
        "z": "1ff02d49d32ca74f",
        "name": "response mean",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1210,
        "y": 920,
        "wires": []
    },
    {
        "id": "186ea90f99e29d7b",
        "type": "json",
        "z": "1ff02d49d32ca74f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 960,
        "wires": [
            [
                "742190e9e7e62ef6"
            ]
        ]
    },
    {
        "id": "742190e9e7e62ef6",
        "type": "function",
        "z": "1ff02d49d32ca74f",
        "name": "store data",
        "func": "my_payload = {};\nmy_payload = msg.payload;\noutput_pd1_mean = {}\noutput_pd1_mean.measurement = my_payload.name.toUpperCase()\noutput_pd1_mean.payload = {\n    value: Math.round(my_payload.power_mean_result * 1e2)/ 1e2,\n    name: my_payload.name,\n}\n\nreturn output_pd1_mean;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 960,
        "wires": [
            [
                "b1e47db6fb4093e9",
                "8153c1341ba5dcd2"
            ]
        ]
    },
    {
        "id": "b1e47db6fb4093e9",
        "type": "influxdb out",
        "z": "1ff02d49d32ca74f",
        "influxdb": "4ad3ce8d.582c5",
        "name": "write_influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "siemens",
        "bucket": "edgedb",
        "x": 1200,
        "y": 960,
        "wires": []
    },
    {
        "id": "a18ffe23f5be216a",
        "type": "comment",
        "z": "1ff02d49d32ca74f",
        "name": "Data Analytics Results",
        "info": "",
        "x": 540,
        "y": 740,
        "wires": []
    },
    {
        "id": "50952f79f64eb614",
        "type": "function",
        "z": "1ff02d49d32ca74f",
        "name": "GET_LAST_ENTRIES",
        "func": "let msgQueryGet = {}\nmsgQueryGet.measurement = msg.payload.measurement\n\nmsgQueryGet.query= `from(bucket: \"edgedb\")\n                      |> range(start: -5h)\n                      |> filter(fn: (r) => r[\"_measurement\"] == \"${msgQueryGet.measurement}\")\n                      |> filter(fn: (r) => r[\"_field\"] == \"value\")\n                      |> sort(columns: [\"_time\"], desc: true)\n                      |> limit(n: 50)\n                      |> group()`;\nreturn msgQueryGet;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 340,
        "wires": [
            [
                "b92d4778a8765068"
            ]
        ]
    },
    {
        "id": "46b6e48d1b12352a",
        "type": "function",
        "z": "1ff02d49d32ca74f",
        "name": "GET_LAST_ENTRIES",
        "func": "let msgQueryGet = {}\nmsgQueryGet.measurement = msg.payload.measurement\n\nmsgQueryGet.query= `from(bucket: \"edgedb\")\n                      |> range(start: -5h)\n                      |> filter(fn: (r) => r[\"_measurement\"] == \"${msgQueryGet.measurement}\")\n                      |> filter(fn: (r) => r[\"_field\"] == \"value\")\n                      |> sort(columns: [\"_time\"], desc: true)\n                      |> limit(n: 50)\n                      |> group()`;\nreturn msgQueryGet;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 500,
        "wires": [
            [
                "98d95adec7f11faf"
            ]
        ]
    },
    {
        "id": "cb10bb534eb091cc",
        "type": "inject",
        "z": "5578664fe1c0ffde",
        "name": "Set Uplink Interval",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "interval",
        "payload": "1000",
        "payloadType": "num",
        "x": 230,
        "y": 300,
        "wires": [
            [
                "96990469e95d3072"
            ]
        ]
    },
    {
        "id": "ae98c4ad6c776953",
        "type": "mqtt out",
        "z": "5578664fe1c0ffde",
        "name": "DOWN",
        "topic": "application/9c955cb6-1a1c-493c-afbc-e77477bb0913/device/a840415cb459c15d/command/down",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ca4f07abb4d962ad",
        "x": 940,
        "y": 380,
        "wires": []
    },
    {
        "id": "96990469e95d3072",
        "type": "function",
        "z": "5578664fe1c0ffde",
        "name": "MAKE COMMAND",
        "func": "\nlet value = msg.payload;\nlet base64Payload = '';\n\nif (msg.topic == 'interval')\n{\n    // Validate the input\n    if (isNaN(value) || value < 0 || value > 16777215) { // 3 bytes max value\n     node.error(\"Invalid interval value. Must be between 0 and 16777215 seconds.\");\n     return null;\n    }\n\n    // Command Code (0x01) followed by 3-byte interval\n    let commandCode = 0x01;\n    let intervalHex = Buffer.alloc(3);\n    intervalHex.writeUIntBE(value, 0, 3); // Write the interval as 3 bytes\n\n    // Combine Command Code and Interval\n    let payload = Buffer.concat([Buffer.from([commandCode]), intervalHex]);\n    \n    // Convert to Base64\n    base64Payload = payload.toString('base64');\n\n}\n\nif (msg.topic == 'adr') {\n   if (value !== false && value !== true) {\n    // Return an error if the data rate is invalid.\n    node.error(\"Invalid data rate. Must be False or True.\");\n    return null;\n}\n\n    // Base command template (type code and fixed bytes).\n    let baseCommand = [0x22, 0x00, 0xaa, 0xff];\n\n    // Set the third byte to the desired data rate.\n    baseCommand[2] = (value === true) ? 1 : 0; \n\n    // Convert the array to a Buffer.\n    let buffer = Buffer.from(baseCommand);\n\n    // Convert to Base64\n    base64Payload = buffer.toString('base64');\n}\n\n\n// Construct the ChirpStack JSON downlink message\nlet downlinkMessage = {\n    dev_eui: \"a840415cb459c15d\", // Replace with the actual DevEUI of your device\n    confirmed: true,    // Change to true if you need a confirmed downlink\n    fPort: 2,            // Adjust to the port your device is listening to\n    data: base64Payload  // Base64-encoded payload\n};\n\n// Set the message output\nmsg.payload = downlinkMessage;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 340,
        "wires": [
            [
                "ae98c4ad6c776953",
                "1445c6a26ef96a86"
            ]
        ]
    },
    {
        "id": "1445c6a26ef96a86",
        "type": "debug",
        "z": "5578664fe1c0ffde",
        "name": "command json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 240,
        "wires": []
    },
    {
        "id": "745533244bec0c8c",
        "type": "comment",
        "z": "5578664fe1c0ffde",
        "name": "Downlink commands",
        "info": "",
        "x": 190,
        "y": 100,
        "wires": []
    },
    {
        "id": "7ac018fcf95ead30",
        "type": "inject",
        "z": "5578664fe1c0ffde",
        "name": "Turn on/off Adaptive Data Rate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "adr",
        "payload": "1",
        "payloadType": "num",
        "x": 250,
        "y": 380,
        "wires": [
            [
                "96990469e95d3072"
            ]
        ]
    },
    {
        "id": "0995defcbd21be43",
        "type": "ui_switch",
        "z": "5578664fe1c0ffde",
        "name": "",
        "label": "Turn Off/On ADR",
        "tooltip": "",
        "group": "4a658f100def1a9e",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "adr",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 230,
        "y": 500,
        "wires": [
            [
                "96990469e95d3072"
            ]
        ]
    },
    {
        "id": "69c6d8783d8bd9ce",
        "type": "ui_numeric",
        "z": "5578664fe1c0ffde",
        "name": "",
        "label": "Uplink interval",
        "tooltip": "",
        "group": "4a658f100def1a9e",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "interval",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1000",
        "max": "10000",
        "step": "1000",
        "className": "",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "96990469e95d3072"
            ]
        ]
    },
    {
        "id": "3ca4e17f31246903",
        "type": "ui_template",
        "z": "5578664fe1c0ffde",
        "group": "4a658f100def1a9e",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<script>\n    export default{\n        data(){\n            return {\n                min:0,\n                max:6.5,\n                label:\"Second Tank\",\n                unit:\"m³\",\n                showMax:true,\n                maxLabel:\"Max\",\n                value:0\n            }\n        }\n    }\n</script>\n\n<template>\n    <div class=\"wrapper\">\n        <div class=\"tank\">\n            <div class=\"fluid\" :style=\"{'height':percentage}\"></div>\n            <div class=\"frame\"></div>\n            <p class=\"txt\">{{formattedValue}}<span>{{unit}}</span></p>\n            <p class=\"label\">{{label}}</p>\n            <p v-if=\"showMax\" class=\"limit\"><span>{{maxLabel}}</span>{{max}}{{unit}}</p>\n        </div>\n        <div>\n</template>\n\n<script>\n    export default{        \n        methods:{\n            getElement: function(name,base){\n                if(base){\n                    return this.$refs[name]\n                }\n                return this.$refs[name][0]\n            },\n            validate: function(data){\n                let ret\n                if(typeof data !== \"number\"){\n                    ret = parseFloat(data)\n                    if(isNaN(ret)){\n                        console.log(\"BAD DATA! gauge id:\",this.id,\"data:\",data)\n                        ret = null\n                    }\n                }\n                else{\n                    ret = data\n                }\n                return ret\n            }\n        },\n        computed: {\n            formattedValue: function () {\n                return this.value.toFixed(2)\n            },\n            percentage: function(){\n                return Math.floor(((this.value - this.min) / (this.max - this.min)) * 100)+\"%\";\n            }\n        },\n        watch: {\n            msg: function(){            \n                const v = this.validate(this.msg.payload)           \n                this.value = v                         \n            }\n        }    \n    }    \n</script>\n<style>\n    .wrapper {\n        position: relative;\n        --border: 3px;\n        --corner: 30px;\n        --fluidColor: #00a8ff;\n    }\n\n    .tank {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        margin: auto;\n        inset: 0;\n        overflow: hidden;\n        border-bottom-left-radius: var(--corner);\n        border-bottom-right-radius: var(--corner);\n    }\n\n    .tank .txt {\n        position: relative;\n        width: 100%;\n        top: 55%;\n        text-align: center;\n        font-size: x-large;\n        font-weight: 700;\n        user-select: none;\n    }\n\n    .tank .txt span {\n        font-size: small;\n        display: contents;\n    }\n\n    .tank .label {\n        position: absolute;\n        width: 100%;\n        top: 20%;\n        text-align: center;\n        font-size: 1rem;\n        user-select: none;\n    }\n\n    .tank .limit {\n        position: absolute;\n        top: 1ch;\n        right: 1ch;\n        text-align: end;\n        font-size: smaller;\n        opacity: .7;\n        user-select: none;\n    }\n\n    .tank .limit span {\n        padding-right: 0.5ch;\n    }\n\n    .tank .frame {\n        position: absolute;\n        width: calc(100% - var(--border));\n        height: calc(100% - var(--border));\n        margin: auto;\n        inset: 0;\n        outline: var(--border) solid;\n        border-bottom-left-radius: var(--corner);\n        border-bottom-right-radius: var(--corner);\n    }\n\n    .tank .fluid {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        bottom: 0;\n        background: var(--fluidColor);\n        border-bottom-left-radius: var(--corner);\n        border-bottom-right-radius: var(--corner);\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "11d1b34bfa575593",
        "type": "inject",
        "z": "d5d694e68123ba96",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 320,
        "wires": [
            [
                "9c034e920e574df7",
                "db3d7cbdbe0e0650",
                "ade3ab79ece98439",
                "3217a13378bc1798",
                "ea79ca0adc250687",
                "f8ed67b7e5fea02f",
                "09780842ddaf0365"
            ]
        ]
    },
    {
        "id": "0c72847ade59736d",
        "type": "function",
        "z": "d5d694e68123ba96",
        "name": "Objects",
        "func": "var msgs = [{}];\nmsgs[0] = {payload : {count : 0}};\nmsgs[1] = {payload : {\n    modbus : false,\n    calcPi : false\n}};\nreturn msgs;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "3149622e4b3f00fe"
            ],
            [
                "854afdf80e93362a"
            ]
        ]
    },
    {
        "id": "2aea35662aed11e6",
        "type": "inject",
        "z": "d5d694e68123ba96",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "0c72847ade59736d"
            ]
        ]
    },
    {
        "id": "3149622e4b3f00fe",
        "type": "change",
        "z": "d5d694e68123ba96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stats",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c4e47e4fe4a4db8d",
        "type": "change",
        "z": "d5d694e68123ba96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stats.CPUs",
                "pt": "global",
                "to": "payload.cpus",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "498331966f0fbce2",
        "type": "change",
        "z": "d5d694e68123ba96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stats.loadavg",
                "pt": "global",
                "to": "payload.loadavg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c6c58ae3ed84bc3f",
        "type": "change",
        "z": "d5d694e68123ba96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stats.memory",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "93ce3550689d04df",
        "type": "change",
        "z": "d5d694e68123ba96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stats.drives",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "cda2c4a23742fefb",
        "type": "change",
        "z": "d5d694e68123ba96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stats.networkInterfaces",
                "pt": "global",
                "to": "payload.networkInterfaces",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "854afdf80e93362a",
        "type": "change",
        "z": "d5d694e68123ba96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "567784eab7b38cf8",
        "type": "change",
        "z": "d5d694e68123ba96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stats.os",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "8d2dfe13746f6367",
        "type": "mqtt out",
        "z": "d5d694e68123ba96",
        "name": "",
        "topic": "stats",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4c18d17991094de3",
        "x": 1070,
        "y": 400,
        "wires": []
    },
    {
        "id": "f8ed67b7e5fea02f",
        "type": "change",
        "z": "d5d694e68123ba96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "stats",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 480,
        "wires": [
            [
                "4c7efac27b29252b"
            ]
        ]
    },
    {
        "id": "8ab61cb7411b826a",
        "type": "mqtt in",
        "z": "d5d694e68123ba96",
        "name": "",
        "topic": "device",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4c18d17991094de3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 80,
        "wires": [
            [
                "921c9494ff46e23a"
            ]
        ]
    },
    {
        "id": "921c9494ff46e23a",
        "type": "function",
        "z": "d5d694e68123ba96",
        "name": "check device",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 80,
        "wires": [
            [
                "854afdf80e93362a"
            ]
        ]
    },
    {
        "id": "4c7efac27b29252b",
        "type": "function",
        "z": "d5d694e68123ba96",
        "name": "Check for hostname",
        "func": "var stats = global.get(\"stats\");\nvar device = global.get(\"device\")\nif(device[stats.os.hostname]){\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 480,
        "wires": [
            [
                "8d2dfe13746f6367"
            ]
        ]
    },
    {
        "id": "09780842ddaf0365",
        "type": "OS",
        "z": "d5d694e68123ba96",
        "name": "",
        "x": 560,
        "y": 240,
        "wires": [
            [
                "567784eab7b38cf8"
            ]
        ]
    },
    {
        "id": "3217a13378bc1798",
        "type": "Drives",
        "z": "d5d694e68123ba96",
        "name": "",
        "x": 560,
        "y": 400,
        "wires": [
            [
                "93ce3550689d04df"
            ]
        ]
    },
    {
        "id": "9c034e920e574df7",
        "type": "CPUs",
        "z": "d5d694e68123ba96",
        "name": "",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "c4e47e4fe4a4db8d"
            ]
        ]
    },
    {
        "id": "db3d7cbdbe0e0650",
        "type": "Loadavg",
        "z": "d5d694e68123ba96",
        "name": "",
        "x": 570,
        "y": 320,
        "wires": [
            [
                "498331966f0fbce2"
            ]
        ]
    },
    {
        "id": "ade3ab79ece98439",
        "type": "Memory",
        "z": "d5d694e68123ba96",
        "name": "",
        "scale": "Byte",
        "x": 570,
        "y": 360,
        "wires": [
            [
                "c6c58ae3ed84bc3f"
            ]
        ]
    },
    {
        "id": "ea79ca0adc250687",
        "type": "NetworkIntf",
        "z": "d5d694e68123ba96",
        "name": "",
        "x": 580,
        "y": 440,
        "wires": [
            [
                "cda2c4a23742fefb"
            ]
        ]
    },
    {
        "id": "f88a2953c5f269ba",
        "type": "mqtt out",
        "z": "18d4fa5bcfba2ffe",
        "name": "",
        "topic": "device",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cce6e02253143063",
        "x": 630,
        "y": 60,
        "wires": []
    },
    {
        "id": "314fb9f767924a3a",
        "type": "inject",
        "z": "18d4fa5bcfba2ffe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Device Messages",
        "payloadType": "str",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "d04a2f9afd5c664b"
            ]
        ]
    },
    {
        "id": "d04a2f9afd5c664b",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "name": "Get device object",
        "func": "var device = global.get(\"device\")\nmsg.payload = device;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 60,
        "wires": [
            [
                "f88a2953c5f269ba"
            ]
        ]
    },
    {
        "id": "b670a26fca7a8097",
        "type": "ui_switch",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "label": "Modbus",
        "tooltip": "",
        "group": "53db0fac8dfd1e61",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 760,
        "y": 220,
        "wires": [
            [
                "df58205adc53b565"
            ]
        ]
    },
    {
        "id": "d72002f7313a30c4",
        "type": "ui_switch",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "label": "Enable Computation",
        "tooltip": "",
        "group": "b1bbc4f30d273934",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 800,
        "y": 280,
        "wires": [
            [
                "c5f59199dbe0f0e0"
            ]
        ]
    },
    {
        "id": "d4fc1262d423c48e",
        "type": "inject",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "5baaacfc205af53f",
                "de0f6d77665773ac"
            ]
        ]
    },
    {
        "id": "5baaacfc205af53f",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "Make Device Object",
        "func": "msg = {payload : {\n    modbus : false,\n    calcPi : false,\n    calcLoops : 10000,\n    raspberrypi1 : false,\n    raspberrypi2 : false,\n    raspberrypi3 : false,\n    raspberrypi4 : false,   \n    raspberrypi5 : false,\n    data : [{}]    \n}};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "33d5a7bfe3967d10",
                "c783ba6268748e3b"
            ]
        ]
    },
    {
        "id": "33d5a7bfe3967d10",
        "type": "change",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "df58205adc53b565",
        "type": "change",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device.modbus",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c5f59199dbe0f0e0",
        "type": "change",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device.calcPi",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "de0f6d77665773ac",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "Make Bool Obj",
        "func": "msg.payload = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 140,
        "wires": [
            [
                "85858491e78a3abd"
            ]
        ]
    },
    {
        "id": "85858491e78a3abd",
        "type": "change",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "bool",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4f3f691cfd57d944",
        "type": "ui_switch",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "label": "raspberry pi 1",
        "tooltip": "",
        "group": "301e3932bd7924d9",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 780,
        "y": 380,
        "wires": [
            [
                "4a3c621abe9ad888"
            ]
        ]
    },
    {
        "id": "4a3c621abe9ad888",
        "type": "change",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device.raspberrypi1",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "6f93092ad15062c8",
        "type": "ui_switch",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "label": "raspberry pi 2",
        "tooltip": "",
        "group": "301e3932bd7924d9",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 780,
        "y": 440,
        "wires": [
            [
                "100d8612bd96b669"
            ]
        ]
    },
    {
        "id": "100d8612bd96b669",
        "type": "change",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device.raspberrypi2",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "de0f4b9db88273bc",
        "type": "ui_switch",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "label": "raspberry pi 3",
        "tooltip": "",
        "group": "301e3932bd7924d9",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 780,
        "y": 500,
        "wires": [
            [
                "41169a2fda841104"
            ]
        ]
    },
    {
        "id": "41169a2fda841104",
        "type": "change",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device.raspberrypi3",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "38ae2f6ae6711428",
        "type": "ui_switch",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "label": "raspberry pi 5",
        "tooltip": "",
        "group": "301e3932bd7924d9",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 780,
        "y": 620,
        "wires": [
            [
                "19b528a9b06ee497"
            ]
        ]
    },
    {
        "id": "19b528a9b06ee497",
        "type": "change",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device.raspberrypi5",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "c66145e8ddedc8d9",
        "type": "ui_switch",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "label": "raspberry pi 4",
        "tooltip": "",
        "group": "301e3932bd7924d9",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 780,
        "y": 560,
        "wires": [
            [
                "d7634581689edb0e"
            ]
        ]
    },
    {
        "id": "d7634581689edb0e",
        "type": "change",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device.raspberrypi4",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "c783ba6268748e3b",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "Make Device Object",
        "func": "var msgs = [{}];\n\nmsgs[0] = {payload : msg.payload.modbus};\nmsgs[1] = { payload: msg.payload.calcPi};\nmsgs[2] = { payload: msg.payload.calcLoops};\nmsgs[3] = { payload: msg.payload.raspberrypi0 };\nmsgs[4] = { payload: msg.payload.raspberrypi1 };\nmsgs[5] = { payload: msg.payload.raspberrypi2 };\nmsgs[6] = { payload: msg.payload.raspberrypi3 };\nmsgs[7] = { payload: msg.payload.raspberrypi4 };\nmsgs[8] = { payload: msg.payload.raspberrypi5 };\nreturn msgs;",
        "outputs": 9,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 420,
        "wires": [
            [
                "b670a26fca7a8097"
            ],
            [
                "d72002f7313a30c4"
            ],
            [
                "089da2e8e3cce80b"
            ],
            [],
            [
                "4f3f691cfd57d944"
            ],
            [
                "6f93092ad15062c8"
            ],
            [
                "de0f4b9db88273bc"
            ],
            [
                "c66145e8ddedc8d9"
            ],
            [
                "38ae2f6ae6711428"
            ]
        ]
    },
    {
        "id": "0c46a7433bc9ed6e",
        "type": "ui_switch",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "label": "Enable All",
        "tooltip": "",
        "group": "301e3932bd7924d9",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 520,
        "y": 620,
        "wires": [
            [
                "38ae2f6ae6711428",
                "c66145e8ddedc8d9",
                "de0f4b9db88273bc",
                "6f93092ad15062c8",
                "4f3f691cfd57d944"
            ]
        ]
    },
    {
        "id": "f9739822a3b1ea51",
        "type": "inject",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 350,
        "y": 620,
        "wires": [
            [
                "0c46a7433bc9ed6e"
            ]
        ]
    },
    {
        "id": "089da2e8e3cce80b",
        "type": "ui_numeric",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "label": "Loop Interations",
        "tooltip": "",
        "group": "b1bbc4f30d273934",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "1000",
        "max": "100000",
        "step": "1000",
        "className": "",
        "x": 780,
        "y": 340,
        "wires": [
            [
                "0f7752b89cfc587b"
            ]
        ]
    },
    {
        "id": "0f7752b89cfc587b",
        "type": "change",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device.calcLoops",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "5b06272476c6fec9",
        "type": "comment",
        "z": "18d4fa5bcfba2ffe",
        "g": "40d5e9f3cb7d1ab5",
        "name": "Visualization Controls",
        "info": "",
        "x": 180,
        "y": 140,
        "wires": []
    },
    {
        "id": "cd7e6d6038fa54d1",
        "type": "mqtt in",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "topic": "stats",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "cce6e02253143063",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 820,
        "wires": [
            [
                "cb9f988bb68bb455",
                "5349a60e9c20570c",
                "535367462ca588e1",
                "8b31768331ad452a",
                "a6e0c4a90d3f5d2c"
            ]
        ]
    },
    {
        "id": "cb9f988bb68bb455",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "load average",
        "func": "msg.topic = msg.payload.os.hostname;\nmsg.payload = msg.payload.loadavg[0];\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 800,
        "wires": [
            [
                "855e336786941581"
            ]
        ]
    },
    {
        "id": "855e336786941581",
        "type": "ui_chart",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "group": "0c00c00418f2b5c9",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "CPU Load Average (1m)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 990,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "5349a60e9c20570c",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "mem usage",
        "func": "msg.topic = msg.payload.os.hostname;\nmsg.payload = msg.payload.memory.memusage;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 840,
        "wires": [
            [
                "77333982d53381e8"
            ]
        ]
    },
    {
        "id": "77333982d53381e8",
        "type": "ui_chart",
        "z": "18d4fa5bcfba2ffe",
        "d": true,
        "g": "bda41343f1564615",
        "name": "",
        "group": "0c00c00418f2b5c9",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Mem Usage (%)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "789da2e46feb0cb7",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "clear data",
        "func": "var device = global.get(\"device\");\nvar data = [];\ndevice.data = data;\nglobal.set(\"device\",device);\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 720,
        "wires": [
            [
                "855e336786941581",
                "77333982d53381e8",
                "4649724107fafd04",
                "0d3bc6f714fbf16d",
                "0ce91d837889e57f"
            ]
        ]
    },
    {
        "id": "ee9f9f3ebf4623f6",
        "type": "ui_button",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "group": "0c00c00418f2b5c9",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 410,
        "y": 720,
        "wires": [
            [
                "789da2e46feb0cb7"
            ]
        ]
    },
    {
        "id": "86ae6470eaf85b23",
        "type": "inject",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1000,
        "wires": [
            [
                "fdaa45a1d1dc5627"
            ]
        ]
    },
    {
        "id": "f7eedc4d9c2c553b",
        "type": "modbus-write",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "MHoldingRegisters",
        "adr": "512",
        "quantity": "1",
        "server": "ee85de5c0b3cc14b",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 780,
        "y": 1000,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bde54b56699c8fe5",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "Toggle Bool",
        "func": "var bool = flow.get(\"bool\")\nif(bool){\n    msg.payload = [1];\n    bool = false;\n}else{\n    msg.payload = [0];\n    bool = true;\n}\nflow.set(\"bool\",bool);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1000,
        "wires": [
            [
                "f7eedc4d9c2c553b"
            ]
        ]
    },
    {
        "id": "fdaa45a1d1dc5627",
        "type": "trigger",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-50",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 370,
        "y": 1000,
        "wires": [
            [
                "bde54b56699c8fe5",
                "0d1aedeb2cfba2ea"
            ]
        ]
    },
    {
        "id": "535367462ca588e1",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "Save payloads",
        "func": "var device = global.get(\"device\");\n// Find the device in the array and update its last payload message received\nvar index = device.data.findIndex(element => element.os && element.os.hostname === msg.payload.os.hostname);\nif(index !== -1){\n    msg.payload.firstMsg = device.data[index].firstMsg; // preserve first message\n    device.data[index] = msg.payload;\n  }else{\n    // New device\n    msg.payload.firstMsg = Date.now(); // message first received, used for boot up time measurement \n    device.data.push(msg.payload);\n}\nglobal.set(\"device\", device);\n\nmsg.topic = msg.payload.os.hostname;\nmsg.payload = msg.payload.count;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 920,
        "wires": [
            [
                "4649724107fafd04"
            ]
        ]
    },
    {
        "id": "4649724107fafd04",
        "type": "ui_chart",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "group": "53db0fac8dfd1e61",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "MB Counts",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "0d1aedeb2cfba2ea",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "Counts",
        "func": "var device = global.get(\"device\");\nvar count = flow.get(\"count\");\nif(device.modbus){\n    count = count + 0.5; // count each pulse\n    flow.set(\"count\",count);\n    msg.topic = \"Reference\";\n    msg.payload = count;\n    node.status({ fill: \"green\", shape: \"dot\", text: \"counts\" + count });\n    return msg;\n}else{\n    count = 0; // save the value of the last falling edge\n    flow.set(\"count\",count);\n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 960,
        "wires": [
            [
                "b24245778b7133ce"
            ]
        ]
    },
    {
        "id": "b24245778b7133ce",
        "type": "delay",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": ".5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 770,
        "y": 960,
        "wires": [
            [
                "4649724107fafd04"
            ]
        ]
    },
    {
        "id": "8b31768331ad452a",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "Get counts",
        "func": "var device = global.get(\"device\");\nvar count = flow.get(\"count\");\nvar data = [{ \"name\" : \"master\", \"counts\" : count}];\nvar element = {};\nfor(let i=0; i< device.data.length;i++){\n  if(device.data[i].hasOwnProperty('count')){\n    element =  {\n      \"counts\" : device.data[i].count,\n      \"name\" : device.data[i].os.hostname}\n  }else{\n    data.pop;\n  }\n\n  data.push(element);\n};\n\ndata.sort((a, b) => {\n  if (a.name > b.name) {\n    return 1;\n  }\n  if (a.name < b.name) {\n    return -1;\n  }\n  return 0;\n});\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 760,
        "wires": [
            [
                "8c50c539f516851b"
            ]
        ]
    },
    {
        "id": "0d3bc6f714fbf16d",
        "type": "ui_table",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "group": "53db0fac8dfd1e61",
        "name": "Counters",
        "order": 2,
        "width": "9",
        "height": "5",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 940,
        "y": 760,
        "wires": []
    },
    {
        "id": "8c50c539f516851b",
        "type": "delay",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": ".5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 770,
        "y": 760,
        "wires": [
            [
                "0d3bc6f714fbf16d"
            ]
        ]
    },
    {
        "id": "ee9e4fe04aadb778",
        "type": "inject",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "b716a9331c099771"
            ]
        ]
    },
    {
        "id": "b716a9331c099771",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "Get details",
        "func": "var device = global.get(\"device\");\nvar data = [];\nvar element = {};\nfor(let i=0; i< device.data.length;i++){\n  if(device.data[i].hasOwnProperty('count')){\n    element =  {\n      \"hostname\" :  device.data[i].os.hostname,\n      \"cores\" : device.data[i].CPUs.length,\n      \"model\" : device.data[i].CPUs[0].model,\n      \"speed\": device.data[i].CPUs[0].speed,\n      \"ram\" : device.data[i].memory.totalmem,\n      \"flash\" : device.data[i].drives[0].size,\n      \"ip\" : device.data[i].networkInterfaces.eth0[0].address,\n      \"mac\" : device.data[i].networkInterfaces.eth0[0].mac,\n      \"uptime\" : (Date.now() - device.data[i].firstMsg)/1000}\n  }else{\n    data.pop;\n  }\n\n  //device.data[4].networkInterfaces.eth0[0]\n  //device.data[4].CPUs[0]\n\n  data.push(element);\n};\n\ndata.sort((a, b) => {\n  if (a.hostname > b.hostname) {\n    return 1;\n  }\n  if (a.hostname < b.hostname) {\n    return -1;\n  }\n  return 0;\n});\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1080,
        "wires": [
            [
                "70e966743c1c1829"
            ]
        ]
    },
    {
        "id": "70e966743c1c1829",
        "type": "ui_table",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "group": "6507ea85adb5317b",
        "name": "",
        "order": 0,
        "width": "20",
        "height": "8",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 790,
        "y": 1080,
        "wires": []
    },
    {
        "id": "e534bdfa2b69f090",
        "type": "ui_button",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "group": "6507ea85adb5317b",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 1120,
        "wires": [
            [
                "b716a9331c099771"
            ]
        ]
    },
    {
        "id": "0ce91d837889e57f",
        "type": "ui_chart",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "",
        "group": "0c00c00418f2b5c9",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "CPU Freq. (kHz)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "2500",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "a6e0c4a90d3f5d2c",
        "type": "function",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "mem usage",
        "func": "msg.topic = msg.payload.os.hostname;\nmsg.payload =  msg.payload.CPUs[0].speed;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 880,
        "wires": [
            [
                "0ce91d837889e57f"
            ]
        ]
    },
    {
        "id": "49dbea5564fb5e98",
        "type": "comment",
        "z": "18d4fa5bcfba2ffe",
        "g": "bda41343f1564615",
        "name": "Get Data from devices",
        "info": "",
        "x": 180,
        "y": 720,
        "wires": []
    },
    {
        "id": "3bae06b49a3387ec",
        "type": "mqtt in",
        "z": "034ca9ee2be547bb",
        "name": "receive sensor data",
        "topic": "ZEM-SB",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ca4f07abb4d962ad",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 100,
        "wires": [
            [
                "3a83fc3f82626599"
            ]
        ]
    },
    {
        "id": "2ebdc6bc7f8f2642",
        "type": "debug",
        "z": "034ca9ee2be547bb",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 100,
        "wires": []
    },
    {
        "id": "df19b729c46af524",
        "type": "inject",
        "z": "034ca9ee2be547bb",
        "g": "012ff504a3100ffc",
        "name": "config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "config",
        "payload": "eth -ifconfig",
        "payloadType": "str",
        "x": 210,
        "y": 220,
        "wires": [
            [
                "7b2e4db565810dfb"
            ]
        ]
    },
    {
        "id": "7b2e4db565810dfb",
        "type": "function",
        "z": "034ca9ee2be547bb",
        "g": "012ff504a3100ffc",
        "name": "create command",
        "func": "\nlet value = msg.payload;\n\nif (msg.topic == 'config') {\n    msg.payload = {\n        command: \"eth -ifconfig\",\n        value: value \n    };\n}\n\nif (msg.topic == 'mqtt') {\n    msg.payload = {\n        command: \"eth -mqtt\",\n        value: value\n    };\n}\n\nif (msg.topic == 'system') {\n    msg.payload = {\n        command: \"core\",\n        value: value\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 280,
        "wires": [
            [
                "5d03f2c33af5fb32",
                "e8729968e5f2678f"
            ]
        ]
    },
    {
        "id": "5d03f2c33af5fb32",
        "type": "mqtt out",
        "z": "034ca9ee2be547bb",
        "g": "012ff504a3100ffc",
        "name": "send config commands",
        "topic": "ZEM-SB/config",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ca4f07abb4d962ad",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "e8729968e5f2678f",
        "type": "debug",
        "z": "034ca9ee2be547bb",
        "g": "012ff504a3100ffc",
        "name": "show command json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 240,
        "wires": []
    },
    {
        "id": "3a83fc3f82626599",
        "type": "delay",
        "z": "034ca9ee2be547bb",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 460,
        "y": 100,
        "wires": [
            [
                "2ebdc6bc7f8f2642"
            ]
        ]
    },
    {
        "id": "3151b96379ea627b",
        "type": "inject",
        "z": "034ca9ee2be547bb",
        "g": "012ff504a3100ffc",
        "name": "mqtt",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "mqtt",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 280,
        "wires": [
            [
                "7b2e4db565810dfb"
            ]
        ]
    },
    {
        "id": "fef5c83f2dc0b191",
        "type": "inject",
        "z": "034ca9ee2be547bb",
        "g": "012ff504a3100ffc",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "system",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 340,
        "wires": [
            [
                "7b2e4db565810dfb"
            ]
        ]
    },
    {
        "id": "9db82a0ec93d3f93",
        "type": "subflow:924be2925f3ecf90",
        "z": "034ca9ee2be547bb",
        "g": "cf54420f4e5c8118",
        "name": "",
        "env": [
            {
                "name": "Device",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 520,
        "y": 560,
        "wires": [
            [
                "48c7c181272ac2cd"
            ],
            [
                "1aace63c9b8fcd1a"
            ],
            [
                "b7e96024ff7881bb"
            ]
        ]
    },
    {
        "id": "af1a5da73ffb87d9",
        "type": "inject",
        "z": "034ca9ee2be547bb",
        "g": "cf54420f4e5c8118",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hello ",
        "payloadType": "str",
        "x": 330,
        "y": 560,
        "wires": [
            [
                "9db82a0ec93d3f93"
            ]
        ]
    },
    {
        "id": "48c7c181272ac2cd",
        "type": "debug",
        "z": "034ca9ee2be547bb",
        "g": "cf54420f4e5c8118",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 520,
        "wires": []
    },
    {
        "id": "1aace63c9b8fcd1a",
        "type": "debug",
        "z": "034ca9ee2be547bb",
        "g": "cf54420f4e5c8118",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 580,
        "wires": []
    },
    {
        "id": "b7e96024ff7881bb",
        "type": "debug",
        "z": "034ca9ee2be547bb",
        "g": "cf54420f4e5c8118",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 640,
        "wires": []
    },
    {
        "id": "a033de2d840c6af5",
        "type": "subflow:924be2925f3ecf90",
        "z": "034ca9ee2be547bb",
        "name": "",
        "x": 1060,
        "y": 500,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2ab02af21a768089",
        "type": "subflow:924be2925f3ecf90",
        "z": "034ca9ee2be547bb",
        "g": "cf54420f4e5c8118",
        "name": "",
        "x": 520,
        "y": 640,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "23cc57c28aa2ddb6",
        "type": "subflow:6233aa5957a4c38f",
        "z": "0ddfb94e5df974c6",
        "g": "f046d6b8385209df",
        "name": "edge device",
        "env": [
            {
                "name": "device id",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "ce6aaacb30f33002"
            ],
            [
                "c3b01793a7d9f31b"
            ]
        ],
        "icon": "font-awesome/fa-university"
    },
    {
        "id": "7a347a347ccdb8e9",
        "type": "inject",
        "z": "0ddfb94e5df974c6",
        "g": "f046d6b8385209df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "23cc57c28aa2ddb6"
            ]
        ]
    },
    {
        "id": "ce6aaacb30f33002",
        "type": "debug",
        "z": "0ddfb94e5df974c6",
        "g": "f046d6b8385209df",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 120,
        "wires": []
    },
    {
        "id": "fda097b5db01c21a",
        "type": "http request",
        "z": "0ddfb94e5df974c6",
        "name": "post to edge node-red",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://<device-ip>:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 560,
        "y": 360,
        "wires": [
            [
                "672c31feddc05465"
            ]
        ]
    },
    {
        "id": "cec2025bbb116f23",
        "type": "inject",
        "z": "0ddfb94e5df974c6",
        "name": "trigger deploy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "device_id",
        "payload": "path_to_exported_flow_file.json",
        "payloadType": "str",
        "x": 230,
        "y": 360,
        "wires": [
            [
                "fda097b5db01c21a",
                "93bf7de5cbc00d29"
            ]
        ]
    },
    {
        "id": "672c31feddc05465",
        "type": "debug",
        "z": "0ddfb94e5df974c6",
        "name": "debug ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 360,
        "wires": []
    },
    {
        "id": "9484f0c70ed533bf",
        "type": "mqtt out",
        "z": "0ddfb94e5df974c6",
        "name": "",
        "topic": "msg.topic",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ca4f07abb4d962ad",
        "x": 660,
        "y": 540,
        "wires": []
    },
    {
        "id": "93bf7de5cbc00d29",
        "type": "function",
        "z": "0ddfb94e5df974c6",
        "name": "message payload",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 540,
        "wires": [
            [
                "9484f0c70ed533bf"
            ]
        ]
    },
    {
        "id": "c3b01793a7d9f31b",
        "type": "debug",
        "z": "0ddfb94e5df974c6",
        "g": "f046d6b8385209df",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 200,
        "wires": []
    },
    {
        "id": "subflow-capture",
        "type": "function",
        "z": "cloud-subflow-ui",
        "name": "Extract Subflow JSON",
        "func": "var subflowId = \"924be2925f3ecf90\";\nvar flows = msg.payload || [];\nglobal.set(\"flows\", flows);  // Store in global memory\n// node.warn(global.get(\"flows\"));  // Print all stored flows\nvar flows = global.get(\"flows\") || [];\n\n\nvar subflows = flows.filter(f => f.type === \"subflow\");\nvar subflow = subflows.find(f => f.id === subflowId);\n\nif (subflow) {\n    msg.topic = \"edge/subflow/update\";\n    msg.payload = subflow;\n} else {\n    msg.payload = \"Subflow not found\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "mqtt-publish-subflow"
            ]
        ]
    },
    {
        "id": "mqtt-publish-subflow",
        "type": "mqtt out",
        "z": "cloud-subflow-ui",
        "name": "Send Subflow to Edge",
        "topic": "edge/subflow/update",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ca4f07abb4d962ad",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "deploy-button",
        "type": "inject",
        "z": "cloud-subflow-ui",
        "name": "Deploy Subflow",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "39260c31c3258f74"
            ]
        ]
    },
    {
        "id": "39260c31c3258f74",
        "type": "http request",
        "z": "cloud-subflow-ui",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://nodered:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "subflow-capture"
            ]
        ]
    }
]